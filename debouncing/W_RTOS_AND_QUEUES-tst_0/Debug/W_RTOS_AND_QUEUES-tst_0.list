
W_RTOS_AND_QUEUES-tst_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000573c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800584c  0800584c  0001584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058fc  080058fc  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080058fc  080058fc  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058fc  080058fc  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08005904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  20000050  08005954  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011a4  08005954  000211a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f5a  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f85  00000000  00000000  00034fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d0  00000000  00000000  00037f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001278  00000000  00000000  00039328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e55  00000000  00000000  0003a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb6c  00000000  00000000  000513f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081643  00000000  00000000  00060f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e25a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005268  00000000  00000000  000e2620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000050 	.word	0x20000050
 800012c:	00000000 	.word	0x00000000
 8000130:	08005834 	.word	0x08005834

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000054 	.word	0x20000054
 800014c:	08005834 	.word	0x08005834

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000006c 	.word	0x2000006c
 800017c:	200000c0 	.word	0x200000c0

08000180 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000198:	7bfb      	ldrb	r3, [r7, #15]
 800019a:	f043 030c 	orr.w	r3, r3, #12
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0308 	orr.w	r3, r3, #8
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80001ac:	7bbb      	ldrb	r3, [r7, #14]
 80001ae:	f043 030c 	orr.w	r3, r3, #12
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80001b6:	7bbb      	ldrb	r3, [r7, #14]
 80001b8:	f043 0308 	orr.w	r3, r3, #8
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001c0:	f107 0208 	add.w	r2, r7, #8
 80001c4:	2364      	movs	r3, #100	; 0x64
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2304      	movs	r3, #4
 80001ca:	214e      	movs	r1, #78	; 0x4e
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <lcd_send_cmd+0x5c>)
 80001ce:	f002 f86b 	bl	80022a8 <HAL_I2C_Master_Transmit>
}
 80001d2:	bf00      	nop
 80001d4:	3710      	adds	r7, #16
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	2000100c 	.word	0x2000100c

080001e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af02      	add	r7, sp, #8
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f023 030f 	bic.w	r3, r3, #15
 80001f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	011b      	lsls	r3, r3, #4
 80001f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	f043 030d 	orr.w	r3, r3, #13
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	f043 0309 	orr.w	r3, r3, #9
 8000208:	b2db      	uxtb	r3, r3
 800020a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	f043 030d 	orr.w	r3, r3, #13
 8000212:	b2db      	uxtb	r3, r3
 8000214:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000216:	7bbb      	ldrb	r3, [r7, #14]
 8000218:	f043 0309 	orr.w	r3, r3, #9
 800021c:	b2db      	uxtb	r3, r3
 800021e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000220:	f107 0208 	add.w	r2, r7, #8
 8000224:	2364      	movs	r3, #100	; 0x64
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2304      	movs	r3, #4
 800022a:	214e      	movs	r1, #78	; 0x4e
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <lcd_send_data+0x5c>)
 800022e:	f002 f83b 	bl	80022a8 <HAL_I2C_Master_Transmit>
}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	2000100c 	.word	0x2000100c

08000240 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000244:	2002      	movs	r0, #2
 8000246:	f7ff ff9b 	bl	8000180 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800024a:	2028      	movs	r0, #40	; 0x28
 800024c:	f7ff ff98 	bl	8000180 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000250:	200c      	movs	r0, #12
 8000252:	f7ff ff95 	bl	8000180 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000256:	2080      	movs	r0, #128	; 0x80
 8000258:	f7ff ff92 	bl	8000180 <lcd_send_cmd>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}

08000260 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000268:	e006      	b.n	8000278 <lcd_send_string+0x18>
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffb4 	bl	80001e0 <lcd_send_data>
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1f4      	bne.n	800026a <lcd_send_string+0xa>
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <main>:
	char *termSensation;

}statusData;

/*****************************************************************************/
int main(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af02      	add	r7, sp, #8

	SystemClock_Config();
 800028e:	f000 f875 	bl	800037c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000292:	f000 f97d 	bl	8000590 <MX_GPIO_Init>
	MX_DMA_Init();
 8000296:	f000 f95d 	bl	8000554 <MX_DMA_Init>
	MX_USART1_UART_Init();
 800029a:	f000 f931 	bl	8000500 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800029e:	f000 f8c3 	bl	8000428 <MX_ADC1_Init>
	MX_I2C1_Init();
 80002a2:	f000 f8ff 	bl	80004a4 <MX_I2C1_Init>

	statusData.min = "20";
 80002a6:	4b25      	ldr	r3, [pc, #148]	; (800033c <main+0xb4>)
 80002a8:	4a25      	ldr	r2, [pc, #148]	; (8000340 <main+0xb8>)
 80002aa:	609a      	str	r2, [r3, #8]
	statusData.max = "30";
 80002ac:	4b23      	ldr	r3, [pc, #140]	; (800033c <main+0xb4>)
 80002ae:	4a25      	ldr	r2, [pc, #148]	; (8000344 <main+0xbc>)
 80002b0:	605a      	str	r2, [r3, #4]
	statusData.min_umbral = 50;
 80002b2:	4b22      	ldr	r3, [pc, #136]	; (800033c <main+0xb4>)
 80002b4:	2232      	movs	r2, #50	; 0x32
 80002b6:	735a      	strb	r2, [r3, #13]
	statusData.max_umbral = 50;
 80002b8:	4b20      	ldr	r3, [pc, #128]	; (800033c <main+0xb4>)
 80002ba:	2232      	movs	r2, #50	; 0x32
 80002bc:	731a      	strb	r2, [r3, #12]
	statusData.termSensation = "----";
 80002be:	4b1f      	ldr	r3, [pc, #124]	; (800033c <main+0xb4>)
 80002c0:	4a21      	ldr	r2, [pc, #132]	; (8000348 <main+0xc0>)
 80002c2:	621a      	str	r2, [r3, #32]
	statusData.tempStr[0] = '-';
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <main+0xb4>)
 80002c6:	222d      	movs	r2, #45	; 0x2d
 80002c8:	701a      	strb	r2, [r3, #0]
	statusData.tempStr[1] = '-';
 80002ca:	4b1c      	ldr	r3, [pc, #112]	; (800033c <main+0xb4>)
 80002cc:	222d      	movs	r2, #45	; 0x2d
 80002ce:	705a      	strb	r2, [r3, #1]
	statusData.tempStr[2] = '.';
 80002d0:	4b1a      	ldr	r3, [pc, #104]	; (800033c <main+0xb4>)
 80002d2:	222e      	movs	r2, #46	; 0x2e
 80002d4:	709a      	strb	r2, [r3, #2]
	statusData.tempStr[3] = '-';
 80002d6:	4b19      	ldr	r3, [pc, #100]	; (800033c <main+0xb4>)
 80002d8:	222d      	movs	r2, #45	; 0x2d
 80002da:	70da      	strb	r2, [r3, #3]

	/************************* Create Integer Queue ****************************/
	SimpleQueue = xQueueCreate(3, sizeof (statusData));
 80002dc:	2200      	movs	r2, #0
 80002de:	2124      	movs	r1, #36	; 0x24
 80002e0:	2003      	movs	r0, #3
 80002e2:	f003 fcf7 	bl	8003cd4 <xQueueGenericCreate>
 80002e6:	4602      	mov	r2, r0
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <main+0xc4>)
 80002ea:	601a      	str	r2, [r3, #0]
	{
		char *str = "Integer Queue Created successfully\n\n";
		HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
	}*/

	lcd_init();
 80002ec:	f7ff ffa8 	bl	8000240 <lcd_init>

	HAL_ADC_Start_DMA(&hadc1, value, 1);
 80002f0:	2201      	movs	r2, #1
 80002f2:	4917      	ldr	r1, [pc, #92]	; (8000350 <main+0xc8>)
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <main+0xcc>)
 80002f6:	f000 ffa3 	bl	8001240 <HAL_ADC_Start_DMA>

	xTaskCreate(sense_Task, "SEND_sensor", 128, NULL, 3, &Sense_Handler);
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <main+0xd0>)
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2303      	movs	r3, #3
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2300      	movs	r3, #0
 8000304:	2280      	movs	r2, #128	; 0x80
 8000306:	4915      	ldr	r1, [pc, #84]	; (800035c <main+0xd4>)
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <main+0xd8>)
 800030a:	f004 f87e 	bl	800440a <xTaskCreate>
	xTaskCreate(buttons_Task, "SEND_buttons", 128, NULL , 3, &Buttons_Handler);
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <main+0xdc>)
 8000310:	9301      	str	r3, [sp, #4]
 8000312:	2303      	movs	r3, #3
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2300      	movs	r3, #0
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	4913      	ldr	r1, [pc, #76]	; (8000368 <main+0xe0>)
 800031c:	4813      	ldr	r0, [pc, #76]	; (800036c <main+0xe4>)
 800031e:	f004 f874 	bl	800440a <xTaskCreate>

	xTaskCreate(display_Task, "RX_display", 128, NULL, 3, &Display_Handler);
 8000322:	4b13      	ldr	r3, [pc, #76]	; (8000370 <main+0xe8>)
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2303      	movs	r3, #3
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2300      	movs	r3, #0
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	4911      	ldr	r1, [pc, #68]	; (8000374 <main+0xec>)
 8000330:	4811      	ldr	r0, [pc, #68]	; (8000378 <main+0xf0>)
 8000332:	f004 f86a 	bl	800440a <xTaskCreate>

	vTaskStartScheduler();
 8000336:	f004 f9c9 	bl	80046cc <vTaskStartScheduler>

	while (1){
 800033a:	e7fe      	b.n	800033a <main+0xb2>
 800033c:	2000112c 	.word	0x2000112c
 8000340:	0800584c 	.word	0x0800584c
 8000344:	08005850 	.word	0x08005850
 8000348:	08005854 	.word	0x08005854
 800034c:	20001060 	.word	0x20001060
 8000350:	2000115c 	.word	0x2000115c
 8000354:	20001068 	.word	0x20001068
 8000358:	20001124 	.word	0x20001124
 800035c:	0800585c 	.word	0x0800585c
 8000360:	08000699 	.word	0x08000699
 8000364:	20001120 	.word	0x20001120
 8000368:	08005868 	.word	0x08005868
 800036c:	080006dd 	.word	0x080006dd
 8000370:	20001154 	.word	0x20001154
 8000374:	08005878 	.word	0x08005878
 8000378:	08000719 	.word	0x08000719

0800037c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b094      	sub	sp, #80	; 0x50
 8000380:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000386:	2228      	movs	r2, #40	; 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f005 fa49 	bl	8005822 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	f107 0314 	add.w	r3, r7, #20
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ac:	2302      	movs	r3, #2
 80003ae:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b0:	2301      	movs	r3, #1
 80003b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b4:	2310      	movs	r3, #16
 80003b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	2302      	movs	r3, #2
 80003ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003bc:	2300      	movs	r3, #0
 80003be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80003c0:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80003c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 fa66 	bl	800289c <HAL_RCC_OscConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x5e>
	{
		Error_Handler();
 80003d6:	f000 fc49 	bl	8000c6c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003da:	230f      	movs	r3, #15
 80003dc:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003de:	2302      	movs	r3, #2
 80003e0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ea:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	2101      	movs	r1, #1
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 fcd0 	bl	8002d9c <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000402:	f000 fc33 	bl	8000c6c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000406:	2302      	movs	r3, #2
 8000408:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4618      	mov	r0, r3
 8000412:	f002 fe8f 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 800041c:	f000 fc26 	bl	8000c6c <Error_Handler>
	}
}
 8000420:	bf00      	nop
 8000422:	3750      	adds	r7, #80	; 0x50
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_ADC1_Init+0x74>)
 800043a:	4a19      	ldr	r2, [pc, #100]	; (80004a0 <MX_ADC1_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <MX_ADC1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <MX_ADC1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_ADC1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_ADC1_Init+0x74>)
 8000452:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000456:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000458:	4b10      	ldr	r3, [pc, #64]	; (800049c <MX_ADC1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_ADC1_Init+0x74>)
 8000460:	2201      	movs	r2, #1
 8000462:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <MX_ADC1_Init+0x74>)
 8000466:	f000 fe13 	bl	8001090 <HAL_ADC_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8000470:	f000 fbfc 	bl	8000c6c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000474:	2300      	movs	r3, #0
 8000476:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000478:	2301      	movs	r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800047c:	2307      	movs	r3, #7
 800047e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4619      	mov	r1, r3
 8000484:	4805      	ldr	r0, [pc, #20]	; (800049c <MX_ADC1_Init+0x74>)
 8000486:	f000 ffd5 	bl	8001434 <HAL_ADC_ConfigChannel>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8000490:	f000 fbec 	bl	8000c6c <Error_Handler>
	}
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20001068 	.word	0x20001068
 80004a0:	40012400 	.word	0x40012400

080004a4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004aa:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <MX_I2C1_Init+0x54>)
 80004ac:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004b0:	4a12      	ldr	r2, [pc, #72]	; (80004fc <MX_I2C1_Init+0x58>)
 80004b2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004c6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004dc:	2200      	movs	r2, #0
 80004de:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_I2C1_Init+0x50>)
 80004e2:	f001 fdb9 	bl	8002058 <HAL_I2C_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80004ec:	f000 fbbe 	bl	8000c6c <Error_Handler>
	}
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000100c 	.word	0x2000100c
 80004f8:	40005400 	.word	0x40005400
 80004fc:	000186a0 	.word	0x000186a0

08000500 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_USART1_UART_Init+0x4c>)
 8000506:	4a12      	ldr	r2, [pc, #72]	; (8000550 <MX_USART1_UART_Init+0x50>)
 8000508:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_USART1_UART_Init+0x4c>)
 800050c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000510:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_USART1_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_USART1_UART_Init+0x4c>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_USART1_UART_Init+0x4c>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_USART1_UART_Init+0x4c>)
 8000526:	220c      	movs	r2, #12
 8000528:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_USART1_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_USART1_UART_Init+0x4c>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_USART1_UART_Init+0x4c>)
 8000538:	f003 f8aa 	bl	8003690 <HAL_UART_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000542:	f000 fb93 	bl	8000c6c <Error_Handler>
	}
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	2000109c 	.word	0x2000109c
 8000550:	40013800 	.word	0x40013800

08000554 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_DMA_Init+0x38>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a0b      	ldr	r2, [pc, #44]	; (800058c <MX_DMA_Init+0x38>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_DMA_Init+0x38>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	200b      	movs	r0, #11
 8000578:	f001 f9cc 	bl	8001914 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800057c:	200b      	movs	r0, #11
 800057e:	f001 f9e5 	bl	800194c <HAL_NVIC_EnableIRQ>

}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	4b38      	ldr	r3, [pc, #224]	; (8000688 <MX_GPIO_Init+0xf8>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a37      	ldr	r2, [pc, #220]	; (8000688 <MX_GPIO_Init+0xf8>)
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b35      	ldr	r3, [pc, #212]	; (8000688 <MX_GPIO_Init+0xf8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0310 	and.w	r3, r3, #16
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b32      	ldr	r3, [pc, #200]	; (8000688 <MX_GPIO_Init+0xf8>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a31      	ldr	r2, [pc, #196]	; (8000688 <MX_GPIO_Init+0xf8>)
 80005c2:	f043 0304 	orr.w	r3, r3, #4
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <MX_GPIO_Init+0xf8>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <MX_GPIO_Init+0xf8>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a2b      	ldr	r2, [pc, #172]	; (8000688 <MX_GPIO_Init+0xf8>)
 80005da:	f043 0308 	orr.w	r3, r3, #8
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <MX_GPIO_Init+0xf8>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0308 	and.w	r3, r3, #8
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f2:	4826      	ldr	r0, [pc, #152]	; (800068c <MX_GPIO_Init+0xfc>)
 80005f4:	f001 fd17 	bl	8002026 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fe:	4823      	ldr	r0, [pc, #140]	; (800068c <MX_GPIO_Init+0xfc>)
 8000600:	f001 fd11 	bl	8002026 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	211e      	movs	r1, #30
 8000608:	4821      	ldr	r0, [pc, #132]	; (8000690 <MX_GPIO_Init+0x100>)
 800060a:	f001 fd0c 	bl	8002026 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800060e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000612:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4819      	ldr	r0, [pc, #100]	; (800068c <MX_GPIO_Init+0xfc>)
 8000628:	f001 fb8c 	bl	8001d44 <HAL_GPIO_Init>

	//SALIDAS
	/*Configure GPIO pins : PC14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 800062c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000630:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2302      	movs	r3, #2
 800063c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_GPIO_Init+0xfc>)
 8000646:	f001 fb7d 	bl	8001d44 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800064a:	231e      	movs	r3, #30
 800064c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2302      	movs	r3, #2
 8000658:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <MX_GPIO_Init+0x100>)
 8000662:	f001 fb6f 	bl	8001d44 <HAL_GPIO_Init>


	/**************************/
	//ENTRADAS
	/*Configure GPIO pin : PB0 B10 B4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 8000666:	f240 4311 	movw	r3, #1041	; 0x411
 800066a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <MX_GPIO_Init+0x104>)
 800067c:	f001 fb62 	bl	8001d44 <HAL_GPIO_Init>




}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	40011000 	.word	0x40011000
 8000690:	40010800 	.word	0x40010800
 8000694:	40010c00 	.word	0x40010c00

08000698 <sense_Task>:

/**************** TASK FUNCTIONS ***********************/
void sense_Task (void *argument) {		//sender
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	60fb      	str	r3, [r7, #12]

	while(1) {
		HAL_ADC_Start_DMA(&hadc1, value, 1);	//hacer una medicion en el ADC
 80006a6:	2201      	movs	r2, #1
 80006a8:	4908      	ldr	r1, [pc, #32]	; (80006cc <sense_Task+0x34>)
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <sense_Task+0x38>)
 80006ac:	f000 fdc8 	bl	8001240 <HAL_ADC_Start_DMA>
		update_statusData();
 80006b0:	f000 f850 	bl	8000754 <update_statusData>

		if (xQueueSend(SimpleQueue, &statusData, portMAX_DELAY) == pdPASS) {}
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <sense_Task+0x3c>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	f04f 32ff 	mov.w	r2, #4294967295
 80006be:	4906      	ldr	r1, [pc, #24]	; (80006d8 <sense_Task+0x40>)
 80006c0:	f003 fb64 	bl	8003d8c <xQueueGenericSend>
		vTaskDelay(TickDelay);
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f003 ffcd 	bl	8004664 <vTaskDelay>
		HAL_ADC_Start_DMA(&hadc1, value, 1);	//hacer una medicion en el ADC
 80006ca:	e7ec      	b.n	80006a6 <sense_Task+0xe>
 80006cc:	2000115c 	.word	0x2000115c
 80006d0:	20001068 	.word	0x20001068
 80006d4:	20001060 	.word	0x20001060
 80006d8:	2000112c 	.word	0x2000112c

080006dc <buttons_Task>:
	}
}
void buttons_Task (void *argument) {		//sender
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 80006e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e8:	60fb      	str	r3, [r7, #12]

	while(1){
		leftButton();
 80006ea:	f000 f9e5 	bl	8000ab8 <leftButton>
		midButton();
 80006ee:	f000 f9ad 	bl	8000a4c <midButton>
		rightButton();
 80006f2:	f000 f97b 	bl	80009ec <rightButton>

		if (xQueueSend(SimpleQueue, &statusData, portMAX_DELAY) == pdPASS) {}
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <buttons_Task+0x34>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000700:	4904      	ldr	r1, [pc, #16]	; (8000714 <buttons_Task+0x38>)
 8000702:	f003 fb43 	bl	8003d8c <xQueueGenericSend>
		vTaskDelay(TickDelay);
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f003 ffac 	bl	8004664 <vTaskDelay>
		leftButton();
 800070c:	e7ed      	b.n	80006ea <buttons_Task+0xe>
 800070e:	bf00      	nop
 8000710:	20001060 	.word	0x20001060
 8000714:	2000112c 	.word	0x2000112c

08000718 <display_Task>:
	}
}
void display_Task (void *argument) {		//receiver
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	60fb      	str	r3, [r7, #12]

	while(1){
		display_in_terminal();
 8000726:	f000 f9ff 	bl	8000b28 <display_in_terminal>
		display_in_LED();
 800072a:	f000 fa5f 	bl	8000bec <display_in_LED>
		display_in_LCD();
 800072e:	f000 fa11 	bl	8000b54 <display_in_LCD>

		if (xQueueReceive(SimpleQueue, &statusData, portMAX_DELAY) != pdTRUE){}
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <display_Task+0x34>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f04f 32ff 	mov.w	r2, #4294967295
 800073a:	4905      	ldr	r1, [pc, #20]	; (8000750 <display_Task+0x38>)
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fc1f 	bl	8003f80 <xQueueReceive>
		vTaskDelay(TickDelay);
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f003 ff8e 	bl	8004664 <vTaskDelay>
		display_in_terminal();
 8000748:	e7ed      	b.n	8000726 <display_Task+0xe>
 800074a:	bf00      	nop
 800074c:	20001060 	.word	0x20001060
 8000750:	2000112c 	.word	0x2000112c

08000754 <update_statusData>:
	}
}

void update_statusData(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	update_tempStr();
 8000758:	f000 f80c 	bl	8000774 <update_tempStr>
	statusData.numTemp = update_tempNum();
 800075c:	f000 f850 	bl	8000800 <update_tempNum>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <update_statusData+0x1c>)
 8000766:	70da      	strb	r2, [r3, #3]
	update_sLEDs();
 8000768:	f000 f87e 	bl	8000868 <update_sLEDs>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000112c 	.word	0x2000112c

08000774 <update_tempStr>:
void update_tempStr(void){
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	statusData.tempStr[0]=((value[0]/1000)+48);			//tens
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <update_tempStr+0x78>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <update_tempStr+0x7c>)
 800077e:	fba2 2303 	umull	r2, r3, r2, r3
 8000782:	099b      	lsrs	r3, r3, #6
 8000784:	b2db      	uxtb	r3, r3
 8000786:	3330      	adds	r3, #48	; 0x30
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <update_tempStr+0x80>)
 800078c:	701a      	strb	r2, [r3, #0]
	statusData.tempStr[1]=(((value[0]%1000)/100)+48);	//units
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <update_tempStr+0x78>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <update_tempStr+0x7c>)
 8000794:	fba3 1302 	umull	r1, r3, r3, r2
 8000798:	099b      	lsrs	r3, r3, #6
 800079a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800079e:	fb01 f303 	mul.w	r3, r1, r3
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <update_tempStr+0x84>)
 80007a6:	fba2 2303 	umull	r2, r3, r2, r3
 80007aa:	095b      	lsrs	r3, r3, #5
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	3330      	adds	r3, #48	; 0x30
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <update_tempStr+0x80>)
 80007b4:	705a      	strb	r2, [r3, #1]
	statusData.tempStr[2]='.';
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <update_tempStr+0x80>)
 80007b8:	222e      	movs	r2, #46	; 0x2e
 80007ba:	709a      	strb	r2, [r3, #2]
	statusData.tempStr[3]=(((value[0]%100)/10)+48);		//decimals
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <update_tempStr+0x78>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <update_tempStr+0x84>)
 80007c2:	fba3 1302 	umull	r1, r3, r3, r2
 80007c6:	095b      	lsrs	r3, r3, #5
 80007c8:	2164      	movs	r1, #100	; 0x64
 80007ca:	fb01 f303 	mul.w	r3, r1, r3
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <update_tempStr+0x88>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	3330      	adds	r3, #48	; 0x30
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <update_tempStr+0x80>)
 80007e0:	70da      	strb	r2, [r3, #3]
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	2000115c 	.word	0x2000115c
 80007f0:	10624dd3 	.word	0x10624dd3
 80007f4:	2000112c 	.word	0x2000112c
 80007f8:	51eb851f 	.word	0x51eb851f
 80007fc:	cccccccd 	.word	0xcccccccd

08000800 <update_tempNum>:
char update_tempNum(void){
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
	char units;
	char tens;
	char tmp;

	tens=((value[0]/1000)+48);
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <update_tempNum+0x5c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <update_tempNum+0x60>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	099b      	lsrs	r3, r3, #6
 8000812:	b2db      	uxtb	r3, r3
 8000814:	3330      	adds	r3, #48	; 0x30
 8000816:	71fb      	strb	r3, [r7, #7]
	units=(((value[0]%1000)/100)+48);
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <update_tempNum+0x5c>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <update_tempNum+0x60>)
 800081e:	fba3 1302 	umull	r1, r3, r3, r2
 8000822:	099b      	lsrs	r3, r3, #6
 8000824:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000828:	fb01 f303 	mul.w	r3, r1, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <update_tempNum+0x64>)
 8000830:	fba2 2303 	umull	r2, r3, r2, r3
 8000834:	095b      	lsrs	r3, r3, #5
 8000836:	b2db      	uxtb	r3, r3
 8000838:	3330      	adds	r3, #48	; 0x30
 800083a:	71bb      	strb	r3, [r7, #6]

	tmp = (tens*10)+units;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	461a      	mov	r2, r3
 8000840:	0092      	lsls	r2, r2, #2
 8000842:	4413      	add	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	4413      	add	r3, r2
 800084c:	717b      	strb	r3, [r7, #5]
	return tmp;
 800084e:	797b      	ldrb	r3, [r7, #5]
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000115c 	.word	0x2000115c
 8000860:	10624dd3 	.word	0x10624dd3
 8000864:	51eb851f 	.word	0x51eb851f

08000868 <update_sLEDs>:
void update_sLEDs(void){
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	//HIGH umbral
	if(statusData.numTemp>statusData.max_umbral) {
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <update_sLEDs+0x98>)
 800086e:	78da      	ldrb	r2, [r3, #3]
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <update_sLEDs+0x98>)
 8000872:	7b1b      	ldrb	r3, [r3, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d90e      	bls.n	8000896 <update_sLEDs+0x2e>
		statusData.min = "OFF";
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <update_sLEDs+0x98>)
 800087a:	4a22      	ldr	r2, [pc, #136]	; (8000904 <update_sLEDs+0x9c>)
 800087c:	609a      	str	r2, [r3, #8]
		statusData.max = "ON ";
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <update_sLEDs+0x98>)
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <update_sLEDs+0xa0>)
 8000882:	605a      	str	r2, [r3, #4]

		statusData.status_Lmax = GPIO_PIN_RESET;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <update_sLEDs+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	761a      	strb	r2, [r3, #24]
		statusData.status_Lmin = GPIO_PIN_SET;
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <update_sLEDs+0x98>)
 800088c:	2201      	movs	r2, #1
 800088e:	765a      	strb	r2, [r3, #25]

		statusData.termSensation = "HOT ";
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <update_sLEDs+0x98>)
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <update_sLEDs+0xa4>)
 8000894:	621a      	str	r2, [r3, #32]
	}
	//MID umbral
	if((statusData.numTemp<statusData.max_umbral) && (statusData.numTemp>statusData.min_umbral)){
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <update_sLEDs+0x98>)
 8000898:	78da      	ldrb	r2, [r3, #3]
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <update_sLEDs+0x98>)
 800089c:	7b1b      	ldrb	r3, [r3, #12]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d214      	bcs.n	80008cc <update_sLEDs+0x64>
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <update_sLEDs+0x98>)
 80008a4:	78da      	ldrb	r2, [r3, #3]
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <update_sLEDs+0x98>)
 80008a8:	7b5b      	ldrb	r3, [r3, #13]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d90e      	bls.n	80008cc <update_sLEDs+0x64>
		statusData.min = "OFF";
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <update_sLEDs+0x98>)
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <update_sLEDs+0x9c>)
 80008b2:	609a      	str	r2, [r3, #8]
		statusData.max = "OFF";
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <update_sLEDs+0x98>)
 80008b6:	4a13      	ldr	r2, [pc, #76]	; (8000904 <update_sLEDs+0x9c>)
 80008b8:	605a      	str	r2, [r3, #4]

		statusData.status_Lmax = GPIO_PIN_SET;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <update_sLEDs+0x98>)
 80008bc:	2201      	movs	r2, #1
 80008be:	761a      	strb	r2, [r3, #24]
		statusData.status_Lmin = GPIO_PIN_SET;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <update_sLEDs+0x98>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	765a      	strb	r2, [r3, #25]

		statusData.termSensation = "MILD";
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <update_sLEDs+0x98>)
 80008c8:	4a11      	ldr	r2, [pc, #68]	; (8000910 <update_sLEDs+0xa8>)
 80008ca:	621a      	str	r2, [r3, #32]
	}
	//LOW umbral
	if(statusData.numTemp<statusData.min_umbral) {
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <update_sLEDs+0x98>)
 80008ce:	78da      	ldrb	r2, [r3, #3]
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <update_sLEDs+0x98>)
 80008d2:	7b5b      	ldrb	r3, [r3, #13]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d20e      	bcs.n	80008f6 <update_sLEDs+0x8e>
		statusData.min = "ON ";
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <update_sLEDs+0x98>)
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <update_sLEDs+0xa0>)
 80008dc:	609a      	str	r2, [r3, #8]
		statusData.max = "OFF";
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <update_sLEDs+0x98>)
 80008e0:	4a08      	ldr	r2, [pc, #32]	; (8000904 <update_sLEDs+0x9c>)
 80008e2:	605a      	str	r2, [r3, #4]

		statusData.status_Lmax = GPIO_PIN_SET;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <update_sLEDs+0x98>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	761a      	strb	r2, [r3, #24]
		statusData.status_Lmin = GPIO_PIN_RESET;
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <update_sLEDs+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	765a      	strb	r2, [r3, #25]

		statusData.termSensation = "COLD";
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <update_sLEDs+0x98>)
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <update_sLEDs+0xac>)
 80008f4:	621a      	str	r2, [r3, #32]
	}
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2000112c 	.word	0x2000112c
 8000904:	08005884 	.word	0x08005884
 8000908:	08005888 	.word	0x08005888
 800090c:	0800588c 	.word	0x0800588c
 8000910:	08005894 	.word	0x08005894
 8000914:	0800589c 	.word	0x0800589c

08000918 <update_data>:
void update_data(void){
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	//TEMP
	data[6] = statusData.tempStr[0]; 	//tens
 800091c:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <update_data+0xcc>)
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <update_data+0xd0>)
 8000922:	719a      	strb	r2, [r3, #6]
	data[7] = statusData.tempStr[1]; 	//tens
 8000924:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <update_data+0xcc>)
 8000926:	785a      	ldrb	r2, [r3, #1]
 8000928:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <update_data+0xd0>)
 800092a:	71da      	strb	r2, [r3, #7]
	data[8]=('C');
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <update_data+0xd0>)
 800092e:	2243      	movs	r2, #67	; 0x43
 8000930:	721a      	strb	r2, [r3, #8]

	//LEDMAX
	data[18]=statusData.L_max[0];
 8000932:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <update_data+0xcc>)
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <update_data+0xd0>)
 800093a:	749a      	strb	r2, [r3, #18]
	data[19]=statusData.L_max[1];
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <update_data+0xcc>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	3301      	adds	r3, #1
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <update_data+0xd0>)
 8000946:	74da      	strb	r2, [r3, #19]
	data[20]=statusData.L_max[2];
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <update_data+0xcc>)
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	3302      	adds	r3, #2
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <update_data+0xd0>)
 8000952:	751a      	strb	r2, [r3, #20]

	//LEDMIN
	data[30]=statusData.L_min[0];
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <update_data+0xcc>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	781a      	ldrb	r2, [r3, #0]
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <update_data+0xd0>)
 800095c:	779a      	strb	r2, [r3, #30]
	data[31]=statusData.L_min[1];
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <update_data+0xcc>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <update_data+0xd0>)
 8000968:	77da      	strb	r2, [r3, #31]
	data[32]=statusData.L_min[2];
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <update_data+0xcc>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	3302      	adds	r3, #2
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <update_data+0xd0>)
 8000974:	f883 2020 	strb.w	r2, [r3, #32]

	//MAX
	data[40]= statusData.max[0];
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <update_data+0xcc>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <update_data+0xd0>)
 8000980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	data[41]= statusData.max[1];
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <update_data+0xcc>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	3301      	adds	r3, #1
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <update_data+0xd0>)
 800098e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	data[42]=('C');
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <update_data+0xd0>)
 8000994:	2243      	movs	r2, #67	; 0x43
 8000996:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	//MIN
	data[50]= statusData.min[0];
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <update_data+0xcc>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <update_data+0xd0>)
 80009a2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	data[51]= statusData.min[1];
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <update_data+0xcc>)
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	3301      	adds	r3, #1
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <update_data+0xd0>)
 80009b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	data[52]=('C');
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <update_data+0xd0>)
 80009b6:	2243      	movs	r2, #67	; 0x43
 80009b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	//Buttons
	data[53]=statusData.lButton;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <update_data+0xcc>)
 80009be:	7e9a      	ldrb	r2, [r3, #26]
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <update_data+0xd0>)
 80009c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	data[54]=statusData.mButton;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <update_data+0xcc>)
 80009c8:	7eda      	ldrb	r2, [r3, #27]
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <update_data+0xd0>)
 80009cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	data[55]=statusData.rButton;
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <update_data+0xcc>)
 80009d2:	7f1a      	ldrb	r2, [r3, #28]
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <update_data+0xd0>)
 80009d6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2000112c 	.word	0x2000112c
 80009e8:	20000000 	.word	0x20000000

080009ec <rightButton>:

void rightButton(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	//////////////////DERECHA/////////////////////////////////////////////////////////////////////////

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==GPIO_PIN_RESET){  // se presionasdsds
 80009f0:	2101      	movs	r1, #1
 80009f2:	4812      	ldr	r0, [pc, #72]	; (8000a3c <rightButton+0x50>)
 80009f4:	f001 fb00 	bl	8001ff8 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10d      	bne.n	8000a1a <rightButton+0x2e>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,GPIO_PIN_SET);          //prende
		statusData.status_rLED = GPIO_PIN_SET;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <rightButton+0x54>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	77da      	strb	r2, [r3, #31]

		statusData.rButton = 'R';
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <rightButton+0x54>)
 8000a06:	2252      	movs	r2, #82	; 0x52
 8000a08:	771a      	strb	r2, [r3, #28]
		button[2]='R';
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <rightButton+0x58>)
 8000a0c:	2252      	movs	r2, #82	; 0x52
 8000a0e:	709a      	strb	r2, [r3, #2]
		data[55]='R';
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <rightButton+0x5c>)
 8000a12:	2252      	movs	r2, #82	; 0x52
 8000a14:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==GPIO_PIN_SET){
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,GPIO_PIN_RstatusData.rButton = '-';
		button[2]='-';
		data[55]='-';
	}
}
 8000a18:	e00d      	b.n	8000a36 <rightButton+0x4a>
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==GPIO_PIN_SET){
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <rightButton+0x50>)
 8000a1e:	f001 faeb 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d106      	bne.n	8000a36 <rightButton+0x4a>
		button[2]='-';
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <rightButton+0x58>)
 8000a2a:	222d      	movs	r2, #45	; 0x2d
 8000a2c:	709a      	strb	r2, [r3, #2]
		data[55]='-';
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <rightButton+0x5c>)
 8000a30:	222d      	movs	r2, #45	; 0x2d
 8000a32:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40010c00 	.word	0x40010c00
 8000a40:	2000112c 	.word	0x2000112c
 8000a44:	2000003c 	.word	0x2000003c
 8000a48:	20000000 	.word	0x20000000

08000a4c <midButton>:
void midButton(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

	///////////////MEDIO///////////////////////////////////////////////////////////////////////////
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_RESET){  // se presiona
 8000a50:	2110      	movs	r1, #16
 8000a52:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <midButton+0x5c>)
 8000a54:	f001 fad0 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10d      	bne.n	8000a7a <midButton+0x2e>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);          //prende
		statusData.status_mLED = GPIO_PIN_SET;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <midButton+0x60>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	779a      	strb	r2, [r3, #30]

		statusData.mButton = 'M';
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <midButton+0x60>)
 8000a66:	224d      	movs	r2, #77	; 0x4d
 8000a68:	76da      	strb	r2, [r3, #27]
		button[1]='M';
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <midButton+0x64>)
 8000a6c:	224d      	movs	r2, #77	; 0x4d
 8000a6e:	705a      	strb	r2, [r3, #1]
		data[54]='M';
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <midButton+0x68>)
 8000a72:	224d      	movs	r2, #77	; 0x4d
 8000a74:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		statusData.mButton = '-';

		button[1]='-';
		data[54]='-';
	}
}
 8000a78:	e013      	b.n	8000aa2 <midButton+0x56>
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_SET){
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <midButton+0x5c>)
 8000a7e:	f001 fabb 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d10c      	bne.n	8000aa2 <midButton+0x56>
		statusData.status_mLED = GPIO_PIN_RESET;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <midButton+0x60>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	779a      	strb	r2, [r3, #30]
		statusData.mButton = '-';
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <midButton+0x60>)
 8000a90:	222d      	movs	r2, #45	; 0x2d
 8000a92:	76da      	strb	r2, [r3, #27]
		button[1]='-';
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <midButton+0x64>)
 8000a96:	222d      	movs	r2, #45	; 0x2d
 8000a98:	705a      	strb	r2, [r3, #1]
		data[54]='-';
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <midButton+0x68>)
 8000a9c:	222d      	movs	r2, #45	; 0x2d
 8000a9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40010c00 	.word	0x40010c00
 8000aac:	2000112c 	.word	0x2000112c
 8000ab0:	2000003c 	.word	0x2000003c
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <leftButton>:
void leftButton(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

	/////////////////IZQUIERDA//////////////////////////////////////////////////////////////////////////
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)==GPIO_PIN_RESET){  // se presiona
 8000abc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac0:	4815      	ldr	r0, [pc, #84]	; (8000b18 <leftButton+0x60>)
 8000ac2:	f001 fa99 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10d      	bne.n	8000ae8 <leftButton+0x30>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,GPIO_PIN_SET);          //RESET LED APAGA
		statusData.status_lLED = GPIO_PIN_SET;
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <leftButton+0x64>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	775a      	strb	r2, [r3, #29]

		statusData.lButton = 'L';
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <leftButton+0x64>)
 8000ad4:	224c      	movs	r2, #76	; 0x4c
 8000ad6:	769a      	strb	r2, [r3, #26]
		button[0]='L';
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <leftButton+0x68>)
 8000ada:	224c      	movs	r2, #76	; 0x4c
 8000adc:	701a      	strb	r2, [r3, #0]
		data[53]='L';
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <leftButton+0x6c>)
 8000ae0:	224c      	movs	r2, #76	; 0x4c
 8000ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		statusData.lButton = '-';
		button[0]='-';
		data[53]='-';
	}
}
 8000ae6:	e014      	b.n	8000b12 <leftButton+0x5a>
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)==GPIO_PIN_SET){
 8000ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <leftButton+0x60>)
 8000aee:	f001 fa83 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d10c      	bne.n	8000b12 <leftButton+0x5a>
		statusData.status_lLED = GPIO_PIN_RESET;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <leftButton+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	775a      	strb	r2, [r3, #29]
		statusData.lButton = '-';
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <leftButton+0x64>)
 8000b00:	222d      	movs	r2, #45	; 0x2d
 8000b02:	769a      	strb	r2, [r3, #26]
		button[0]='-';
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <leftButton+0x68>)
 8000b06:	222d      	movs	r2, #45	; 0x2d
 8000b08:	701a      	strb	r2, [r3, #0]
		data[53]='-';
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <leftButton+0x6c>)
 8000b0c:	222d      	movs	r2, #45	; 0x2d
 8000b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	2000112c 	.word	0x2000112c
 8000b20:	2000003c 	.word	0x2000003c
 8000b24:	20000000 	.word	0x20000000

08000b28 <display_in_terminal>:

void display_in_terminal(void){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	update_data();
 8000b2c:	f7ff fef4 	bl	8000918 <update_data>

	HAL_UART_Transmit(&huart1, data, 60, 1000);
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	223c      	movs	r2, #60	; 0x3c
 8000b36:	4905      	ldr	r1, [pc, #20]	; (8000b4c <display_in_terminal+0x24>)
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <display_in_terminal+0x28>)
 8000b3a:	f002 fdf6 	bl	800372a <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b42:	f000 fa83 	bl	800104c <HAL_Delay>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	2000109c 	.word	0x2000109c

08000b54 <display_in_LCD>:
void display_in_LCD(void){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	f7ff fb11 	bl	8000180 <lcd_send_cmd>
	lcd_send_string("TEMP:");
 8000b5e:	481f      	ldr	r0, [pc, #124]	; (8000bdc <display_in_LCD+0x88>)
 8000b60:	f7ff fb7e 	bl	8000260 <lcd_send_string>
	lcd_send_data(statusData.tempStr[0]);//decimal
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <display_in_LCD+0x8c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fb39 	bl	80001e0 <lcd_send_data>
	lcd_send_data(statusData.tempStr[1]);//unidad
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <display_in_LCD+0x8c>)
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fb34 	bl	80001e0 <lcd_send_data>
	lcd_send_data(statusData.tempStr[2]);//punto decimal
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <display_in_LCD+0x8c>)
 8000b7a:	789b      	ldrb	r3, [r3, #2]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fb2f 	bl	80001e0 <lcd_send_data>
	lcd_send_data(statusData.tempStr[3]);//punto decimal
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <display_in_LCD+0x8c>)
 8000b84:	78db      	ldrb	r3, [r3, #3]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fb2a 	bl	80001e0 <lcd_send_data>
	lcd_send_string(" C     ");
 8000b8c:	4815      	ldr	r0, [pc, #84]	; (8000be4 <display_in_LCD+0x90>)
 8000b8e:	f7ff fb67 	bl	8000260 <lcd_send_string>
	lcd_send_cmd(0xc0); //segunda linea
 8000b92:	20c0      	movs	r0, #192	; 0xc0
 8000b94:	f7ff faf4 	bl	8000180 <lcd_send_cmd>
	lcd_send_string("                ");
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <display_in_LCD+0x94>)
 8000b9a:	f7ff fb61 	bl	8000260 <lcd_send_string>
	lcd_send_cmd(0x8b);
 8000b9e:	208b      	movs	r0, #139	; 0x8b
 8000ba0:	f7ff faee 	bl	8000180 <lcd_send_cmd>
	lcd_send_data(statusData.lButton);//decimal
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <display_in_LCD+0x8c>)
 8000ba6:	7e9b      	ldrb	r3, [r3, #26]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fb19 	bl	80001e0 <lcd_send_data>
	lcd_send_data(statusData.mButton);//unidad
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <display_in_LCD+0x8c>)
 8000bb0:	7edb      	ldrb	r3, [r3, #27]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fb14 	bl	80001e0 <lcd_send_data>
	lcd_send_data(statusData.rButton);//punto decimal
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <display_in_LCD+0x8c>)
 8000bba:	7f1b      	ldrb	r3, [r3, #28]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fb0f 	bl	80001e0 <lcd_send_data>

	vTaskDelay(100);
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f003 fd4e 	bl	8004664 <vTaskDelay>

	lcd_send_cmd(0xc0);
 8000bc8:	20c0      	movs	r0, #192	; 0xc0
 8000bca:	f7ff fad9 	bl	8000180 <lcd_send_cmd>
	lcd_send_string(statusData.termSensation);
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <display_in_LCD+0x8c>)
 8000bd0:	6a1b      	ldr	r3, [r3, #32]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fb44 	bl	8000260 <lcd_send_string>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	080058a4 	.word	0x080058a4
 8000be0:	2000112c 	.word	0x2000112c
 8000be4:	080058ac 	.word	0x080058ac
 8000be8:	080058b4 	.word	0x080058b4

08000bec <display_in_LED>:
void display_in_LED(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, statusData.status_Lmax);
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <display_in_LED+0x50>)
 8000bf2:	7e1b      	ldrb	r3, [r3, #24]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <display_in_LED+0x54>)
 8000bfa:	f001 fa14 	bl	8002026 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, statusData.status_Lmin);
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <display_in_LED+0x50>)
 8000c00:	7e5b      	ldrb	r3, [r3, #25]
 8000c02:	461a      	mov	r2, r3
 8000c04:	2104      	movs	r1, #4
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <display_in_LED+0x54>)
 8000c08:	f001 fa0d 	bl	8002026 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,statusData.status_rLED);
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <display_in_LED+0x50>)
 8000c0e:	7fdb      	ldrb	r3, [r3, #31]
 8000c10:	461a      	mov	r2, r3
 8000c12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <display_in_LED+0x58>)
 8000c18:	f001 fa05 	bl	8002026 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,statusData.status_mLED);
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <display_in_LED+0x50>)
 8000c1e:	7f9b      	ldrb	r3, [r3, #30]
 8000c20:	461a      	mov	r2, r3
 8000c22:	2102      	movs	r1, #2
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <display_in_LED+0x58>)
 8000c26:	f001 f9fe 	bl	8002026 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,statusData.status_lLED);
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <display_in_LED+0x50>)
 8000c2c:	7f5b      	ldrb	r3, [r3, #29]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	2108      	movs	r1, #8
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <display_in_LED+0x54>)
 8000c34:	f001 f9f7 	bl	8002026 <HAL_GPIO_WritePin>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000112c 	.word	0x2000112c
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40011000 	.word	0x40011000

08000c48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d101      	bne.n	8000c5e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c5a:	f000 f9db 	bl	8001014 <HAL_IncTick>
	}
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <HAL_ADC_MspInit+0xbc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d149      	bne.n	8000d2c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4819      	ldr	r0, [pc, #100]	; (8000d3c <HAL_ADC_MspInit+0xc4>)
 8000cd8:	f001 f834 	bl	8001d44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_ADC_MspInit+0xcc>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d06:	2220      	movs	r2, #32
 8000d08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d10:	480b      	ldr	r0, [pc, #44]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d12:	f000 fe29 	bl	8001968 <HAL_DMA_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d1c:	f7ff ffa6 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d24:	621a      	str	r2, [r3, #32]
 8000d26:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40012400 	.word	0x40012400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800
 8000d40:	200010dc 	.word	0x200010dc
 8000d44:	40020008 	.word	0x40020008

08000d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <HAL_I2C_MspInit+0x70>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d123      	bne.n	8000db0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d80:	23c0      	movs	r3, #192	; 0xc0
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_I2C_MspInit+0x78>)
 8000d94:	f000 ffd6 	bl	8001d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da2:	61d3      	str	r3, [r2, #28]
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <HAL_UART_MspInit+0x8c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d131      	bne.n	8000e48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_UART_MspInit+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a1a      	ldr	r2, [pc, #104]	; (8000e54 <HAL_UART_MspInit+0x90>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0x90>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_UART_MspInit+0x90>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <HAL_UART_MspInit+0x90>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_UART_MspInit+0x90>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HAL_UART_MspInit+0x94>)
 8000e2a:	f000 ff8b 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_UART_MspInit+0x94>)
 8000e44:	f000 ff7e 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800

08000e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2019      	movs	r0, #25
 8000e72:	f000 fd4f 	bl	8001914 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000e76:	2019      	movs	r0, #25
 8000e78:	f000 fd68 	bl	800194c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_InitTick+0x9c>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_InitTick+0x9c>)
 8000e82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <HAL_InitTick+0x9c>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e94:	f107 0210 	add.w	r2, r7, #16
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 f8fa 	bl	8003098 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ea4:	f002 f8e4 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8000ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eac:	4a13      	ldr	r2, [pc, #76]	; (8000efc <HAL_InitTick+0xa0>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_InitTick+0xa4>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <HAL_InitTick+0xa8>)
 8000ebc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_InitTick+0xa4>)
 8000ec0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_InitTick+0xa4>)
 8000ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_InitTick+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_InitTick+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <HAL_InitTick+0xa4>)
 8000eda:	f002 f9e1 	bl	80032a0 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d104      	bne.n	8000eee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <HAL_InitTick+0xa4>)
 8000ee6:	f002 fa0f 	bl	8003308 <HAL_TIM_Base_Start_IT>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3730      	adds	r7, #48	; 0x30
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	431bde83 	.word	0x431bde83
 8000f00:	20001160 	.word	0x20001160
 8000f04:	40012c00 	.word	0x40012c00

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <BusFault_Handler+0x4>

08000f26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <UsageFault_Handler+0x4>

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <DMA1_Channel1_IRQHandler+0x10>)
 8000f3e:	f000 fdcd 	bl	8001adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200010dc 	.word	0x200010dc

08000f4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <TIM1_UP_IRQHandler+0x10>)
 8000f52:	f002 f9fc 	bl	800334e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20001160 	.word	0x20001160

08000f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <SystemInit+0x5c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <SystemInit+0x5c>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <SystemInit+0x5c>)
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	4911      	ldr	r1, [pc, #68]	; (8000fbc <SystemInit+0x5c>)
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <SystemInit+0x60>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <SystemInit+0x5c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <SystemInit+0x5c>)
 8000f82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <SystemInit+0x5c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SystemInit+0x5c>)
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <SystemInit+0x5c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <SystemInit+0x5c>)
 8000f9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000fa2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SystemInit+0x5c>)
 8000fa6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000faa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SystemInit+0x64>)
 8000fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	f8ff0000 	.word	0xf8ff0000
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fca:	e003      	b.n	8000fd4 <LoopCopyDataInit>

08000fcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fd2:	3104      	adds	r1, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fd4:	480a      	ldr	r0, [pc, #40]	; (8001000 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fdc:	d3f6      	bcc.n	8000fcc <CopyDataInit>
  ldr r2, =_sbss
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fe0:	e002      	b.n	8000fe8 <LoopFillZerobss>

08000fe2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fe4:	f842 3b04 	str.w	r3, [r2], #4

08000fe8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fec:	d3f9      	bcc.n	8000fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fee:	f7ff ffb7 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f004 fbe7 	bl	80057c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ff6:	f7ff f947 	bl	8000288 <main>
  bx lr
 8000ffa:	4770      	bx	lr
  ldr r3, =_sidata
 8000ffc:	08005904 	.word	0x08005904
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001004:	20000050 	.word	0x20000050
  ldr r2, =_sbss
 8001008:	20000050 	.word	0x20000050
  ldr r3, = _ebss
 800100c:	200011a4 	.word	0x200011a4

08001010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC1_2_IRQHandler>
	...

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a03      	ldr	r2, [pc, #12]	; (8001034 <HAL_IncTick+0x20>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20000048 	.word	0x20000048
 8001034:	200011a0 	.word	0x200011a0

08001038 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b02      	ldr	r3, [pc, #8]	; (8001048 <HAL_GetTick+0x10>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	200011a0 	.word	0x200011a0

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff fff0 	bl	8001038 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_Delay+0x40>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffe0 	bl	8001038 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000048 	.word	0x20000048

08001090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e0be      	b.n	8001230 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d109      	bne.n	80010d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fdd2 	bl	8000c78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 faf7 	bl	80016c8 <ADC_ConversionStop_Disable>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 8099 	bne.w	800121e <HAL_ADC_Init+0x18e>
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 8095 	bne.w	800121e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010fc:	f023 0302 	bic.w	r3, r3, #2
 8001100:	f043 0202 	orr.w	r2, r3, #2
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001110:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7b1b      	ldrb	r3, [r3, #12]
 8001116:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001118:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4313      	orrs	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001128:	d003      	beq.n	8001132 <HAL_ADC_Init+0xa2>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d102      	bne.n	8001138 <HAL_ADC_Init+0xa8>
 8001132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001136:	e000      	b.n	800113a <HAL_ADC_Init+0xaa>
 8001138:	2300      	movs	r3, #0
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7d1b      	ldrb	r3, [r3, #20]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d119      	bne.n	800117c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7b1b      	ldrb	r3, [r3, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d109      	bne.n	8001164 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	3b01      	subs	r3, #1
 8001156:	035a      	lsls	r2, r3, #13
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	e00b      	b.n	800117c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f043 0220 	orr.w	r2, r3, #32
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	430a      	orrs	r2, r1
 800118e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <HAL_ADC_Init+0x1a8>)
 8001198:	4013      	ands	r3, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ac:	d003      	beq.n	80011b6 <HAL_ADC_Init+0x126>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d104      	bne.n	80011c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	051b      	lsls	r3, r3, #20
 80011be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_ADC_Init+0x1ac>)
 80011dc:	4013      	ands	r3, r2
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d10b      	bne.n	80011fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f023 0303 	bic.w	r3, r3, #3
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011fa:	e018      	b.n	800122e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f023 0312 	bic.w	r3, r3, #18
 8001204:	f043 0210 	orr.w	r2, r3, #16
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800121c:	e007      	b.n	800122e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	f043 0210 	orr.w	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800122e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	ffe1f7fd 	.word	0xffe1f7fd
 800123c:	ff1f0efe 	.word	0xff1f0efe

08001240 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a64      	ldr	r2, [pc, #400]	; (80013e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d004      	beq.n	8001264 <HAL_ADC_Start_DMA+0x24>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a63      	ldr	r2, [pc, #396]	; (80013ec <HAL_ADC_Start_DMA+0x1ac>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d106      	bne.n	8001272 <HAL_ADC_Start_DMA+0x32>
 8001264:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f040 80b3 	bne.w	80013d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_ADC_Start_DMA+0x40>
 800127c:	2302      	movs	r3, #2
 800127e:	e0ae      	b.n	80013de <HAL_ADC_Start_DMA+0x19e>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f000 f9cb 	bl	8001624 <ADC_Enable>
 800128e:	4603      	mov	r3, r0
 8001290:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b00      	cmp	r3, #0
 8001296:	f040 809a 	bne.w	80013ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a4e      	ldr	r2, [pc, #312]	; (80013ec <HAL_ADC_Start_DMA+0x1ac>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d105      	bne.n	80012c4 <HAL_ADC_Start_DMA+0x84>
 80012b8:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <HAL_ADC_Start_DMA+0x1a8>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d115      	bne.n	80012f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d026      	beq.n	800132c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ee:	e01d      	b.n	800132c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a39      	ldr	r2, [pc, #228]	; (80013e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d004      	beq.n	8001310 <HAL_ADC_Start_DMA+0xd0>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a38      	ldr	r2, [pc, #224]	; (80013ec <HAL_ADC_Start_DMA+0x1ac>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d10d      	bne.n	800132c <HAL_ADC_Start_DMA+0xec>
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001318:	2b00      	cmp	r3, #0
 800131a:	d007      	beq.n	800132c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001324:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	f023 0206 	bic.w	r2, r3, #6
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
 8001344:	e002      	b.n	800134c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <HAL_ADC_Start_DMA+0x1b0>)
 800135a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <HAL_ADC_Start_DMA+0x1b4>)
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <HAL_ADC_Start_DMA+0x1b8>)
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f06f 0202 	mvn.w	r2, #2
 8001374:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001384:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a18      	ldr	r0, [r3, #32]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	334c      	adds	r3, #76	; 0x4c
 8001390:	4619      	mov	r1, r3
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f000 fb41 	bl	8001a1c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013a4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013a8:	d108      	bne.n	80013bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013ba:	e00f      	b.n	80013dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013cc:	e006      	b.n	80013dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80013d6:	e001      	b.n	80013dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40012400 	.word	0x40012400
 80013ec:	40012800 	.word	0x40012800
 80013f0:	0800173d 	.word	0x0800173d
 80013f4:	080017b9 	.word	0x080017b9
 80013f8:	080017d5 	.word	0x080017d5

080013fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
	...

08001434 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x20>
 8001450:	2302      	movs	r3, #2
 8001452:	e0dc      	b.n	800160e <HAL_ADC_ConfigChannel+0x1da>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b06      	cmp	r3, #6
 8001462:	d81c      	bhi.n	800149e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3b05      	subs	r3, #5
 8001476:	221f      	movs	r2, #31
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	4019      	ands	r1, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b05      	subs	r3, #5
 8001490:	fa00 f203 	lsl.w	r2, r0, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	635a      	str	r2, [r3, #52]	; 0x34
 800149c:	e03c      	b.n	8001518 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b0c      	cmp	r3, #12
 80014a4:	d81c      	bhi.n	80014e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	3b23      	subs	r3, #35	; 0x23
 80014b8:	221f      	movs	r2, #31
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	4019      	ands	r1, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	3b23      	subs	r3, #35	; 0x23
 80014d2:	fa00 f203 	lsl.w	r2, r0, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
 80014de:	e01b      	b.n	8001518 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b41      	subs	r3, #65	; 0x41
 80014f2:	221f      	movs	r2, #31
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4019      	ands	r1, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	fa00 f203 	lsl.w	r2, r0, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b09      	cmp	r3, #9
 800151e:	d91c      	bls.n	800155a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68d9      	ldr	r1, [r3, #12]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	3b1e      	subs	r3, #30
 8001532:	2207      	movs	r2, #7
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	4019      	ands	r1, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	6898      	ldr	r0, [r3, #8]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	3b1e      	subs	r3, #30
 800154c:	fa00 f203 	lsl.w	r2, r0, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	e019      	b.n	800158e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6919      	ldr	r1, [r3, #16]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	2207      	movs	r2, #7
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	4019      	ands	r1, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6898      	ldr	r0, [r3, #8]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	fa00 f203 	lsl.w	r2, r0, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b10      	cmp	r3, #16
 8001594:	d003      	beq.n	800159e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800159a:	2b11      	cmp	r3, #17
 800159c:	d132      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_ADC_ConfigChannel+0x1e4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d125      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d126      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015c4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d11a      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_ADC_ConfigChannel+0x1e8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a13      	ldr	r2, [pc, #76]	; (8001620 <HAL_ADC_ConfigChannel+0x1ec>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	0c9a      	lsrs	r2, r3, #18
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015e4:	e002      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f9      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x1b2>
 80015f2:	e007      	b.n	8001604 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f043 0220 	orr.w	r2, r3, #32
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	40012400 	.word	0x40012400
 800161c:	20000040 	.word	0x20000040
 8001620:	431bde83 	.word	0x431bde83

08001624 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b01      	cmp	r3, #1
 8001640:	d039      	beq.n	80016b6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 0201 	orr.w	r2, r2, #1
 8001650:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <ADC_Enable+0x9c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <ADC_Enable+0xa0>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	0c9b      	lsrs	r3, r3, #18
 800165e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001660:	e002      	b.n	8001668 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3b01      	subs	r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f9      	bne.n	8001662 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800166e:	f7ff fce3 	bl	8001038 <HAL_GetTick>
 8001672:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001674:	e018      	b.n	80016a8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001676:	f7ff fcdf 	bl	8001038 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d911      	bls.n	80016a8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f043 0210 	orr.w	r2, r3, #16
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f043 0201 	orr.w	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e007      	b.n	80016b8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d1df      	bne.n	8001676 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000040 	.word	0x20000040
 80016c4:	431bde83 	.word	0x431bde83

080016c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d127      	bne.n	8001732 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016f2:	f7ff fca1 	bl	8001038 <HAL_GetTick>
 80016f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016f8:	e014      	b.n	8001724 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016fa:	f7ff fc9d 	bl	8001038 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d90d      	bls.n	8001724 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	f043 0210 	orr.w	r2, r3, #16
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e007      	b.n	8001734 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d0e3      	beq.n	80016fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001752:	2b00      	cmp	r3, #0
 8001754:	d127      	bne.n	80017a6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800176c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001770:	d115      	bne.n	800179e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001776:	2b00      	cmp	r3, #0
 8001778:	d111      	bne.n	800179e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7ff fe2c 	bl	80013fc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017a4:	e004      	b.n	80017b0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f7ff fe21 	bl	800140e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	f043 0204 	orr.w	r2, r3, #4
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff fe10 	bl	8001420 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4906      	ldr	r1, [pc, #24]	; (8001858 <__NVIC_EnableIRQ+0x34>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001926:	f7ff ff6f 	bl	8001808 <__NVIC_GetPriorityGrouping>
 800192a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	6978      	ldr	r0, [r7, #20]
 8001932:	f7ff ffbd 	bl	80018b0 <NVIC_EncodePriority>
 8001936:	4602      	mov	r2, r0
 8001938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff8c 	bl	800185c <__NVIC_SetPriority>
}
 8001944:	bf00      	nop
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff62 	bl	8001824 <__NVIC_EnableIRQ>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e043      	b.n	8001a06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_DMA_Init+0xa8>)
 8001986:	4413      	add	r3, r2
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <HAL_DMA_Init+0xac>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	009a      	lsls	r2, r3, #2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <HAL_DMA_Init+0xb0>)
 800199a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	bffdfff8 	.word	0xbffdfff8
 8001a14:	cccccccd 	.word	0xcccccccd
 8001a18:	40020000 	.word	0x40020000

08001a1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_DMA_Start_IT+0x20>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e04a      	b.n	8001ad2 <HAL_DMA_Start_IT+0xb6>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d13a      	bne.n	8001ac4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2202      	movs	r2, #2
 8001a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f938 	bl	8001ce8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 020e 	orr.w	r2, r2, #14
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e00f      	b.n	8001ab2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0204 	bic.w	r2, r2, #4
 8001aa0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 020a 	orr.w	r2, r2, #10
 8001ab0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e005      	b.n	8001ad0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
 8001ace:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	2204      	movs	r2, #4
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d04f      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0xc8>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d04a      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0204 	bic.w	r2, r2, #4
 8001b2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a66      	ldr	r2, [pc, #408]	; (8001ccc <HAL_DMA_IRQHandler+0x1f0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d029      	beq.n	8001b8a <HAL_DMA_IRQHandler+0xae>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_DMA_IRQHandler+0x1f4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d022      	beq.n	8001b86 <HAL_DMA_IRQHandler+0xaa>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a63      	ldr	r2, [pc, #396]	; (8001cd4 <HAL_DMA_IRQHandler+0x1f8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d01a      	beq.n	8001b80 <HAL_DMA_IRQHandler+0xa4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a62      	ldr	r2, [pc, #392]	; (8001cd8 <HAL_DMA_IRQHandler+0x1fc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d012      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x9e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <HAL_DMA_IRQHandler+0x200>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00a      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x98>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a5f      	ldr	r2, [pc, #380]	; (8001ce0 <HAL_DMA_IRQHandler+0x204>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d102      	bne.n	8001b6e <HAL_DMA_IRQHandler+0x92>
 8001b68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6c:	e00e      	b.n	8001b8c <HAL_DMA_IRQHandler+0xb0>
 8001b6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b72:	e00b      	b.n	8001b8c <HAL_DMA_IRQHandler+0xb0>
 8001b74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b78:	e008      	b.n	8001b8c <HAL_DMA_IRQHandler+0xb0>
 8001b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b7e:	e005      	b.n	8001b8c <HAL_DMA_IRQHandler+0xb0>
 8001b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b84:	e002      	b.n	8001b8c <HAL_DMA_IRQHandler+0xb0>
 8001b86:	2340      	movs	r3, #64	; 0x40
 8001b88:	e000      	b.n	8001b8c <HAL_DMA_IRQHandler+0xb0>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	4a55      	ldr	r2, [pc, #340]	; (8001ce4 <HAL_DMA_IRQHandler+0x208>)
 8001b8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8094 	beq.w	8001cc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ba2:	e08e      	b.n	8001cc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	2202      	movs	r2, #2
 8001baa:	409a      	lsls	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d056      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x186>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d051      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10b      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 020a 	bic.w	r2, r2, #10
 8001bda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a38      	ldr	r2, [pc, #224]	; (8001ccc <HAL_DMA_IRQHandler+0x1f0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d029      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x166>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a37      	ldr	r2, [pc, #220]	; (8001cd0 <HAL_DMA_IRQHandler+0x1f4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d022      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x162>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a35      	ldr	r2, [pc, #212]	; (8001cd4 <HAL_DMA_IRQHandler+0x1f8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01a      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x15c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <HAL_DMA_IRQHandler+0x1fc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d012      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x156>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a32      	ldr	r2, [pc, #200]	; (8001cdc <HAL_DMA_IRQHandler+0x200>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00a      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x150>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a31      	ldr	r2, [pc, #196]	; (8001ce0 <HAL_DMA_IRQHandler+0x204>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d102      	bne.n	8001c26 <HAL_DMA_IRQHandler+0x14a>
 8001c20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c24:	e00e      	b.n	8001c44 <HAL_DMA_IRQHandler+0x168>
 8001c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2a:	e00b      	b.n	8001c44 <HAL_DMA_IRQHandler+0x168>
 8001c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c30:	e008      	b.n	8001c44 <HAL_DMA_IRQHandler+0x168>
 8001c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c36:	e005      	b.n	8001c44 <HAL_DMA_IRQHandler+0x168>
 8001c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3c:	e002      	b.n	8001c44 <HAL_DMA_IRQHandler+0x168>
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e000      	b.n	8001c44 <HAL_DMA_IRQHandler+0x168>
 8001c42:	2302      	movs	r3, #2
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <HAL_DMA_IRQHandler+0x208>)
 8001c46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d034      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c60:	e02f      	b.n	8001cc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	2208      	movs	r2, #8
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d028      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x1e8>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d023      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 020e 	bic.w	r2, r2, #14
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
    }
  }
  return;
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
}
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40020008 	.word	0x40020008
 8001cd0:	4002001c 	.word	0x4002001c
 8001cd4:	40020030 	.word	0x40020030
 8001cd8:	40020044 	.word	0x40020044
 8001cdc:	40020058 	.word	0x40020058
 8001ce0:	4002006c 	.word	0x4002006c
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f202 	lsl.w	r2, r1, r2
 8001d04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d108      	bne.n	8001d28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d26:	e007      	b.n	8001d38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	60da      	str	r2, [r3, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	; 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e127      	b.n	8001fa8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8116 	bne.w	8001fa2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d034      	beq.n	8001de8 <HAL_GPIO_Init+0xa4>
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d80d      	bhi.n	8001d9e <HAL_GPIO_Init+0x5a>
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d02b      	beq.n	8001dde <HAL_GPIO_Init+0x9a>
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d804      	bhi.n	8001d94 <HAL_GPIO_Init+0x50>
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d031      	beq.n	8001df2 <HAL_GPIO_Init+0xae>
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d01c      	beq.n	8001dcc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d92:	e048      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d043      	beq.n	8001e20 <HAL_GPIO_Init+0xdc>
 8001d98:	2b11      	cmp	r3, #17
 8001d9a:	d01b      	beq.n	8001dd4 <HAL_GPIO_Init+0x90>
          break;
 8001d9c:	e043      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d9e:	4a89      	ldr	r2, [pc, #548]	; (8001fc4 <HAL_GPIO_Init+0x280>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d026      	beq.n	8001df2 <HAL_GPIO_Init+0xae>
 8001da4:	4a87      	ldr	r2, [pc, #540]	; (8001fc4 <HAL_GPIO_Init+0x280>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d806      	bhi.n	8001db8 <HAL_GPIO_Init+0x74>
 8001daa:	4a87      	ldr	r2, [pc, #540]	; (8001fc8 <HAL_GPIO_Init+0x284>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d020      	beq.n	8001df2 <HAL_GPIO_Init+0xae>
 8001db0:	4a86      	ldr	r2, [pc, #536]	; (8001fcc <HAL_GPIO_Init+0x288>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01d      	beq.n	8001df2 <HAL_GPIO_Init+0xae>
          break;
 8001db6:	e036      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001db8:	4a85      	ldr	r2, [pc, #532]	; (8001fd0 <HAL_GPIO_Init+0x28c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0xae>
 8001dbe:	4a85      	ldr	r2, [pc, #532]	; (8001fd4 <HAL_GPIO_Init+0x290>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d016      	beq.n	8001df2 <HAL_GPIO_Init+0xae>
 8001dc4:	4a84      	ldr	r2, [pc, #528]	; (8001fd8 <HAL_GPIO_Init+0x294>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0xae>
          break;
 8001dca:	e02c      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	623b      	str	r3, [r7, #32]
          break;
 8001dd2:	e028      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e023      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	3308      	adds	r3, #8
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e01e      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	330c      	adds	r3, #12
 8001dee:	623b      	str	r3, [r7, #32]
          break;
 8001df0:	e019      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e012      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	611a      	str	r2, [r3, #16]
          break;
 8001e12:	e008      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e14:	2308      	movs	r3, #8
 8001e16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	615a      	str	r2, [r3, #20]
          break;
 8001e1e:	e002      	b.n	8001e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2bff      	cmp	r3, #255	; 0xff
 8001e2a:	d801      	bhi.n	8001e30 <HAL_GPIO_Init+0xec>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	e001      	b.n	8001e34 <HAL_GPIO_Init+0xf0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3304      	adds	r3, #4
 8001e34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2bff      	cmp	r3, #255	; 0xff
 8001e3a:	d802      	bhi.n	8001e42 <HAL_GPIO_Init+0xfe>
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x104>
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	3b08      	subs	r3, #8
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	210f      	movs	r1, #15
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	401a      	ands	r2, r3
 8001e5a:	6a39      	ldr	r1, [r7, #32]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	431a      	orrs	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8096 	beq.w	8001fa2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e76:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_GPIO_Init+0x298>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_GPIO_Init+0x298>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6193      	str	r3, [r2, #24]
 8001e82:	4b56      	ldr	r3, [pc, #344]	; (8001fdc <HAL_GPIO_Init+0x298>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e8e:	4a54      	ldr	r2, [pc, #336]	; (8001fe0 <HAL_GPIO_Init+0x29c>)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0x19e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00d      	beq.n	8001ede <HAL_GPIO_Init+0x19a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <HAL_GPIO_Init+0x196>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x192>
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x1a0>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e004      	b.n	8001ee4 <HAL_GPIO_Init+0x1a0>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e002      	b.n	8001ee4 <HAL_GPIO_Init+0x1a0>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x1a0>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee6:	f002 0203 	and.w	r2, r2, #3
 8001eea:	0092      	lsls	r2, r2, #2
 8001eec:	4093      	lsls	r3, r2
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ef4:	493a      	ldr	r1, [pc, #232]	; (8001fe0 <HAL_GPIO_Init+0x29c>)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f0e:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4938      	ldr	r1, [pc, #224]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f1c:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	4933      	ldr	r1, [pc, #204]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	492e      	ldr	r1, [pc, #184]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
 8001f42:	e006      	b.n	8001f52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4929      	ldr	r1, [pc, #164]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5e:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	4924      	ldr	r1, [pc, #144]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
 8001f6a:	e006      	b.n	8001f7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	491f      	ldr	r1, [pc, #124]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	491a      	ldr	r1, [pc, #104]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60cb      	str	r3, [r1, #12]
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	4915      	ldr	r1, [pc, #84]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f47f aed0 	bne.w	8001d58 <HAL_GPIO_Init+0x14>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	372c      	adds	r7, #44	; 0x2c
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	10210000 	.word	0x10210000
 8001fc8:	10110000 	.word	0x10110000
 8001fcc:	10120000 	.word	0x10120000
 8001fd0:	10310000 	.word	0x10310000
 8001fd4:	10320000 	.word	0x10320000
 8001fd8:	10220000 	.word	0x10220000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	40011000 	.word	0x40011000
 8001ff0:	40011400 	.word	0x40011400
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e001      	b.n	800201a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	807b      	strh	r3, [r7, #2]
 8002032:	4613      	mov	r3, r2
 8002034:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002036:	787b      	ldrb	r3, [r7, #1]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203c:	887a      	ldrh	r2, [r7, #2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002042:	e003      	b.n	800204c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	041a      	lsls	r2, r3, #16
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	611a      	str	r2, [r3, #16]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
	...

08002058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e10f      	b.n	800228a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fe62 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	; 0x24
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800209c:	f000 ffd4 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 80020a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a7b      	ldr	r2, [pc, #492]	; (8002294 <HAL_I2C_Init+0x23c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d807      	bhi.n	80020bc <HAL_I2C_Init+0x64>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a7a      	ldr	r2, [pc, #488]	; (8002298 <HAL_I2C_Init+0x240>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf94      	ite	ls
 80020b4:	2301      	movls	r3, #1
 80020b6:	2300      	movhi	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e006      	b.n	80020ca <HAL_I2C_Init+0x72>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a77      	ldr	r2, [pc, #476]	; (800229c <HAL_I2C_Init+0x244>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	bf94      	ite	ls
 80020c4:	2301      	movls	r3, #1
 80020c6:	2300      	movhi	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0db      	b.n	800228a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4a72      	ldr	r2, [pc, #456]	; (80022a0 <HAL_I2C_Init+0x248>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0c9b      	lsrs	r3, r3, #18
 80020dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a64      	ldr	r2, [pc, #400]	; (8002294 <HAL_I2C_Init+0x23c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d802      	bhi.n	800210c <HAL_I2C_Init+0xb4>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3301      	adds	r3, #1
 800210a:	e009      	b.n	8002120 <HAL_I2C_Init+0xc8>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	4a63      	ldr	r2, [pc, #396]	; (80022a4 <HAL_I2C_Init+0x24c>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	3301      	adds	r3, #1
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	430b      	orrs	r3, r1
 8002126:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002132:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4956      	ldr	r1, [pc, #344]	; (8002294 <HAL_I2C_Init+0x23c>)
 800213c:	428b      	cmp	r3, r1
 800213e:	d80d      	bhi.n	800215c <HAL_I2C_Init+0x104>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e59      	subs	r1, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fbb1 f3f3 	udiv	r3, r1, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	bf38      	it	cc
 8002158:	2304      	movcc	r3, #4
 800215a:	e04f      	b.n	80021fc <HAL_I2C_Init+0x1a4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d111      	bne.n	8002188 <HAL_I2C_Init+0x130>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e58      	subs	r0, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	440b      	add	r3, r1
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e012      	b.n	80021ae <HAL_I2C_Init+0x156>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1e58      	subs	r0, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	0099      	lsls	r1, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	fbb0 f3f3 	udiv	r3, r0, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Init+0x15e>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e022      	b.n	80021fc <HAL_I2C_Init+0x1a4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10e      	bne.n	80021dc <HAL_I2C_Init+0x184>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1e58      	subs	r0, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	440b      	add	r3, r1
 80021cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021da:	e00f      	b.n	80021fc <HAL_I2C_Init+0x1a4>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1e58      	subs	r0, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	0099      	lsls	r1, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	6809      	ldr	r1, [r1, #0]
 8002200:	4313      	orrs	r3, r2
 8002202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800222a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6911      	ldr	r1, [r2, #16]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68d2      	ldr	r2, [r2, #12]
 8002236:	4311      	orrs	r1, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	430b      	orrs	r3, r1
 800223e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	000186a0 	.word	0x000186a0
 8002298:	001e847f 	.word	0x001e847f
 800229c:	003d08ff 	.word	0x003d08ff
 80022a0:	431bde83 	.word	0x431bde83
 80022a4:	10624dd3 	.word	0x10624dd3

080022a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	460b      	mov	r3, r1
 80022b6:	817b      	strh	r3, [r7, #10]
 80022b8:	4613      	mov	r3, r2
 80022ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7fe febc 	bl	8001038 <HAL_GetTick>
 80022c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	f040 80e0 	bne.w	8002490 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2319      	movs	r3, #25
 80022d6:	2201      	movs	r2, #1
 80022d8:	4970      	ldr	r1, [pc, #448]	; (800249c <HAL_I2C_Master_Transmit+0x1f4>)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f958 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
 80022e8:	e0d3      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_I2C_Master_Transmit+0x50>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e0cc      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d007      	beq.n	800231e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2221      	movs	r2, #33	; 0x21
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2210      	movs	r2, #16
 800233a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	893a      	ldrh	r2, [r7, #8]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a50      	ldr	r2, [pc, #320]	; (80024a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002360:	8979      	ldrh	r1, [r7, #10]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	6a3a      	ldr	r2, [r7, #32]
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 f89c 	bl	80024a4 <I2C_MasterRequestWrite>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e08d      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800238c:	e066      	b.n	800245c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	6a39      	ldr	r1, [r7, #32]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f9d2 	bl	800273c <I2C_WaitOnTXEFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00d      	beq.n	80023ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d107      	bne.n	80023b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06b      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d11b      	bne.n	8002430 <HAL_I2C_Master_Transmit+0x188>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d017      	beq.n	8002430 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	6a39      	ldr	r1, [r7, #32]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f9c2 	bl	80027be <I2C_WaitOnBTFFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	2b04      	cmp	r3, #4
 8002446:	d107      	bne.n	8002458 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002456:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e01a      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	d194      	bne.n	800238e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	00100002 	.word	0x00100002
 80024a0:	ffff0000 	.word	0xffff0000

080024a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	460b      	mov	r3, r1
 80024b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d006      	beq.n	80024ce <I2C_MasterRequestWrite+0x2a>
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d003      	beq.n	80024ce <I2C_MasterRequestWrite+0x2a>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024cc:	d108      	bne.n	80024e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e00b      	b.n	80024f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	2b12      	cmp	r3, #18
 80024e6:	d107      	bne.n	80024f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f843 	bl	8002590 <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e035      	b.n	8002580 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800251c:	d108      	bne.n	8002530 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800251e:	897b      	ldrh	r3, [r7, #10]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800252c:	611a      	str	r2, [r3, #16]
 800252e:	e01b      	b.n	8002568 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002530:	897b      	ldrh	r3, [r7, #10]
 8002532:	11db      	asrs	r3, r3, #7
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f003 0306 	and.w	r3, r3, #6
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f063 030f 	orn	r3, r3, #15
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	490e      	ldr	r1, [pc, #56]	; (8002588 <I2C_MasterRequestWrite+0xe4>)
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f875 	bl	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e010      	b.n	8002580 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800255e:	897b      	ldrh	r3, [r7, #10]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4907      	ldr	r1, [pc, #28]	; (800258c <I2C_MasterRequestWrite+0xe8>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f865 	bl	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	00010008 	.word	0x00010008
 800258c:	00010002 	.word	0x00010002

08002590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a0:	e025      	b.n	80025ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d021      	beq.n	80025ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025aa:	f7fe fd45 	bl	8001038 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d116      	bne.n	80025ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e023      	b.n	8002636 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10d      	bne.n	8002614 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4013      	ands	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf0c      	ite	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	2300      	movne	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	e00c      	b.n	800262e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4013      	ands	r3, r2
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	429a      	cmp	r2, r3
 8002632:	d0b6      	beq.n	80025a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800264c:	e051      	b.n	80026f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265c:	d123      	bne.n	80026a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002676:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f043 0204 	orr.w	r2, r3, #4
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e046      	b.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d021      	beq.n	80026f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe fcc3 	bl	8001038 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d116      	bne.n	80026f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e020      	b.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10c      	bne.n	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4013      	ands	r3, r2
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	e00b      	b.n	800272e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	43da      	mvns	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d18d      	bne.n	800264e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002748:	e02d      	b.n	80027a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f878 	bl	8002840 <I2C_IsAcknowledgeFailed>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e02d      	b.n	80027b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d021      	beq.n	80027a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002762:	f7fe fc69 	bl	8001038 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	429a      	cmp	r2, r3
 8002770:	d302      	bcc.n	8002778 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d116      	bne.n	80027a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e007      	b.n	80027b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	2b80      	cmp	r3, #128	; 0x80
 80027b2:	d1ca      	bne.n	800274a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027ca:	e02d      	b.n	8002828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f837 	bl	8002840 <I2C_IsAcknowledgeFailed>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e02d      	b.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e2:	d021      	beq.n	8002828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e4:	f7fe fc28 	bl	8001038 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d302      	bcc.n	80027fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e007      	b.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b04      	cmp	r3, #4
 8002834:	d1ca      	bne.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002856:	d11b      	bne.n	8002890 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002860:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e26c      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8087 	beq.w	80029ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028bc:	4b92      	ldr	r3, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d00c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c8:	4b8f      	ldr	r3, [pc, #572]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d112      	bne.n	80028fa <HAL_RCC_OscConfig+0x5e>
 80028d4:	4b8c      	ldr	r3, [pc, #560]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d10b      	bne.n	80028fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e2:	4b89      	ldr	r3, [pc, #548]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d06c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x12c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d168      	bne.n	80029c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e246      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x76>
 8002904:	4b80      	ldr	r3, [pc, #512]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a7f      	ldr	r2, [pc, #508]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800290a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	e02e      	b.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x98>
 800291a:	4b7b      	ldr	r3, [pc, #492]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7a      	ldr	r2, [pc, #488]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b78      	ldr	r3, [pc, #480]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a77      	ldr	r2, [pc, #476]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800292c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e01d      	b.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0xbc>
 800293e:	4b72      	ldr	r3, [pc, #456]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a71      	ldr	r2, [pc, #452]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b6f      	ldr	r3, [pc, #444]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002958:	4b6b      	ldr	r3, [pc, #428]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a6a      	ldr	r2, [pc, #424]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800296a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fb5e 	bl	8001038 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe fb5a 	bl	8001038 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1fa      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b5d      	ldr	r3, [pc, #372]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0xe4>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fb4a 	bl	8001038 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7fe fb46 	bl	8001038 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1e6      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x10c>
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d063      	beq.n	8002a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d6:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029e2:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d11c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x18c>
 80029ee:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d116      	bne.n	8002a28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x176>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e1ba      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a12:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4939      	ldr	r1, [pc, #228]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	e03a      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe faff 	bl	8001038 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fafb 	bl	8001038 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e19b      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4927      	ldr	r1, [pc, #156]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
 8002a70:	e015      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fe fade 	bl	8001038 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7fe fada 	bl	8001038 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e17a      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d03a      	beq.n	8002b20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d019      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fabe 	bl	8001038 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7fe faba 	bl	8001038 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e15a      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f000 fb0a 	bl	80030f8 <RCC_Delay>
 8002ae4:	e01c      	b.n	8002b20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aec:	f7fe faa4 	bl	8001038 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af2:	e00f      	b.n	8002b14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe faa0 	bl	8001038 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d908      	bls.n	8002b14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e140      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	42420000 	.word	0x42420000
 8002b10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b9e      	ldr	r3, [pc, #632]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e9      	bne.n	8002af4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80a6 	beq.w	8002c7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b97      	ldr	r3, [pc, #604]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	4b94      	ldr	r3, [pc, #592]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	4a93      	ldr	r2, [pc, #588]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b48:	61d3      	str	r3, [r2, #28]
 8002b4a:	4b91      	ldr	r3, [pc, #580]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b8e      	ldr	r3, [pc, #568]	; (8002d94 <HAL_RCC_OscConfig+0x4f8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b66:	4b8b      	ldr	r3, [pc, #556]	; (8002d94 <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a8a      	ldr	r2, [pc, #552]	; (8002d94 <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b72:	f7fe fa61 	bl	8001038 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7fe fa5d 	bl	8001038 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	; 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0fd      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <HAL_RCC_OscConfig+0x4f8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x312>
 8002ba0:	4b7b      	ldr	r3, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a7a      	ldr	r2, [pc, #488]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	e02d      	b.n	8002c0a <HAL_RCC_OscConfig+0x36e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x334>
 8002bb6:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a75      	ldr	r2, [pc, #468]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6213      	str	r3, [r2, #32]
 8002bc2:	4b73      	ldr	r3, [pc, #460]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4a72      	ldr	r2, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6213      	str	r3, [r2, #32]
 8002bce:	e01c      	b.n	8002c0a <HAL_RCC_OscConfig+0x36e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x356>
 8002bd8:	4b6d      	ldr	r3, [pc, #436]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a6c      	ldr	r2, [pc, #432]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6213      	str	r3, [r2, #32]
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0x36e>
 8002bf2:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a66      	ldr	r2, [pc, #408]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6213      	str	r3, [r2, #32]
 8002bfe:	4b64      	ldr	r3, [pc, #400]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a63      	ldr	r2, [pc, #396]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d015      	beq.n	8002c3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c12:	f7fe fa11 	bl	8001038 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe fa0d 	bl	8001038 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0ab      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c30:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ee      	beq.n	8002c1a <HAL_RCC_OscConfig+0x37e>
 8002c3c:	e014      	b.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe f9fb 	bl	8001038 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe f9f7 	bl	8001038 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e095      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5c:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ee      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4a47      	ldr	r2, [pc, #284]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8081 	beq.w	8002d86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c84:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d061      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d146      	bne.n	8002d26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <HAL_RCC_OscConfig+0x4fc>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe f9cb 	bl	8001038 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fe f9c7 	bl	8001038 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e067      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb8:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d108      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cce:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	492d      	ldr	r1, [pc, #180]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a19      	ldr	r1, [r3, #32]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	4927      	ldr	r1, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_RCC_OscConfig+0x4fc>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe f99b 	bl	8001038 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe f997 	bl	8001038 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e037      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x46a>
 8002d24:	e02f      	b.n	8002d86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_RCC_OscConfig+0x4fc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f984 	bl	8001038 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe f980 	bl	8001038 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e020      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x498>
 8002d52:	e018      	b.n	8002d86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e013      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40007000 	.word	0x40007000
 8002d98:	42420060 	.word	0x42420060

08002d9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0d0      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db0:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d910      	bls.n	8002de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 0207 	bic.w	r2, r3, #7
 8002dc6:	4965      	ldr	r1, [pc, #404]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b63      	ldr	r3, [pc, #396]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0b8      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d020      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df8:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a58      	ldr	r2, [pc, #352]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e10:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1c:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	494d      	ldr	r1, [pc, #308]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d040      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d115      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e07f      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e073      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6a:	4b3d      	ldr	r3, [pc, #244]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e06b      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7a:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4936      	ldr	r1, [pc, #216]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe f8d4 	bl	8001038 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fe f8d0 	bl	8001038 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e053      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 020c 	and.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1eb      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d210      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 0207 	bic.w	r2, r3, #7
 8002ed2:	4922      	ldr	r1, [pc, #136]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e032      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4916      	ldr	r1, [pc, #88]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	490e      	ldr	r1, [pc, #56]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f2a:	f000 f821 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 8002f2e:	4601      	mov	r1, r0
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	5cd3      	ldrb	r3, [r2, r3]
 8002f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1cc>)
 8002f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1d0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd ff86 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	40021000 	.word	0x40021000
 8002f64:	080058e4 	.word	0x080058e4
 8002f68:	20000040 	.word	0x20000040
 8002f6c:	20000044 	.word	0x20000044

08002f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f70:	b490      	push	{r4, r7}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f76:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f78:	1d3c      	adds	r4, r7, #4
 8002f7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d002      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x46>
 8002fae:	e02d      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fb2:	623b      	str	r3, [r7, #32]
      break;
 8002fb4:	e02d      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	0c9b      	lsrs	r3, r3, #18
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fd4:	4b14      	ldr	r3, [pc, #80]	; (8003028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	0c5b      	lsrs	r3, r3, #17
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fe8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	4a0f      	ldr	r2, [pc, #60]	; (800302c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fee:	fb02 f203 	mul.w	r2, r2, r3
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffa:	e004      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	4a0c      	ldr	r2, [pc, #48]	; (8003030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003000:	fb02 f303 	mul.w	r3, r2, r3
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	623b      	str	r3, [r7, #32]
      break;
 800300a:	e002      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_RCC_GetSysClockFreq+0xbc>)
 800300e:	623b      	str	r3, [r7, #32]
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	6a3b      	ldr	r3, [r7, #32]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3728      	adds	r7, #40	; 0x28
 8003018:	46bd      	mov	sp, r7
 800301a:	bc90      	pop	{r4, r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	080058c8 	.word	0x080058c8
 8003024:	080058d8 	.word	0x080058d8
 8003028:	40021000 	.word	0x40021000
 800302c:	007a1200 	.word	0x007a1200
 8003030:	003d0900 	.word	0x003d0900

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b02      	ldr	r3, [pc, #8]	; (8003044 <HAL_RCC_GetHCLKFreq+0x10>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	20000040 	.word	0x20000040

08003048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800304c:	f7ff fff2 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003050:	4601      	mov	r1, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4a03      	ldr	r2, [pc, #12]	; (800306c <HAL_RCC_GetPCLK1Freq+0x24>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	080058f4 	.word	0x080058f4

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003074:	f7ff ffde 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003078:	4601      	mov	r1, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	0adb      	lsrs	r3, r3, #11
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4a03      	ldr	r2, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	fa21 f303 	lsr.w	r3, r1, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	080058f4 	.word	0x080058f4

08003098 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	220f      	movs	r2, #15
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_RCC_GetClockConfig+0x58>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_RCC_GetClockConfig+0x58>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_GetClockConfig+0x58>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_RCC_GetClockConfig+0x58>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0207 	and.w	r2, r3, #7
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40022000 	.word	0x40022000

080030f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <RCC_Delay+0x34>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <RCC_Delay+0x38>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0a5b      	lsrs	r3, r3, #9
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003114:	bf00      	nop
  }
  while (Delay --);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1e5a      	subs	r2, r3, #1
 800311a:	60fa      	str	r2, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f9      	bne.n	8003114 <RCC_Delay+0x1c>
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000040 	.word	0x20000040
 8003130:	10624dd3 	.word	0x10624dd3

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d07d      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003154:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10d      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	4a4b      	ldr	r2, [pc, #300]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316a:	61d3      	str	r3, [r2, #28]
 800316c:	4b49      	ldr	r3, [pc, #292]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003178:	2301      	movs	r3, #1
 800317a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b46      	ldr	r3, [pc, #280]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d118      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003188:	4b43      	ldr	r3, [pc, #268]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a42      	ldr	r2, [pc, #264]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800318e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003192:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003194:	f7fd ff50 	bl	8001038 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	e008      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319c:	f7fd ff4c 	bl	8001038 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e06d      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d02e      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d027      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031d8:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031e2:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031e8:	4b2c      	ldr	r3, [pc, #176]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031ee:	4a29      	ldr	r2, [pc, #164]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d014      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fd ff1b 	bl	8001038 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fd ff17 	bl	8001038 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e036      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ee      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4917      	ldr	r1, [pc, #92]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	4313      	orrs	r3, r2
 8003238:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	4a13      	ldr	r2, [pc, #76]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	490b      	ldr	r1, [pc, #44]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4904      	ldr	r1, [pc, #16]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	42420440 	.word	0x42420440

080032a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e01d      	b.n	80032ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f815 	bl	80032f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 f962 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d007      	beq.n	8003342 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b02      	cmp	r3, #2
 8003362:	d122      	bne.n	80033aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d11b      	bne.n	80033aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0202 	mvn.w	r2, #2
 800337a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f8ed 	bl	8003570 <HAL_TIM_IC_CaptureCallback>
 8003396:	e005      	b.n	80033a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8e0 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f8ef 	bl	8003582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d122      	bne.n	80033fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d11b      	bne.n	80033fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f06f 0204 	mvn.w	r2, #4
 80033ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f8c3 	bl	8003570 <HAL_TIM_IC_CaptureCallback>
 80033ea:	e005      	b.n	80033f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8b6 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f8c5 	bl	8003582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b08      	cmp	r3, #8
 800340a:	d122      	bne.n	8003452 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	d11b      	bne.n	8003452 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f06f 0208 	mvn.w	r2, #8
 8003422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2204      	movs	r2, #4
 8003428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f899 	bl	8003570 <HAL_TIM_IC_CaptureCallback>
 800343e:	e005      	b.n	800344c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f88c 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f89b 	bl	8003582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b10      	cmp	r3, #16
 800345e:	d122      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d11b      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f06f 0210 	mvn.w	r2, #16
 8003476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2208      	movs	r2, #8
 800347c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f86f 	bl	8003570 <HAL_TIM_IC_CaptureCallback>
 8003492:	e005      	b.n	80034a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f862 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f871 	bl	8003582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10e      	bne.n	80034d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f06f 0201 	mvn.w	r2, #1
 80034ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd fbbb 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b80      	cmp	r3, #128	; 0x80
 80034de:	d10e      	bne.n	80034fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d107      	bne.n	80034fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f8c0 	bl	800367e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d10e      	bne.n	800352a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d107      	bne.n	800352a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f835 	bl	8003594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b20      	cmp	r3, #32
 8003536:	d10e      	bne.n	8003556 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d107      	bne.n	8003556 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f06f 0220 	mvn.w	r2, #32
 800354e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f88b 	bl	800366c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
	...

080035a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a29      	ldr	r2, [pc, #164]	; (8003660 <TIM_Base_SetConfig+0xb8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00b      	beq.n	80035d8 <TIM_Base_SetConfig+0x30>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d007      	beq.n	80035d8 <TIM_Base_SetConfig+0x30>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a26      	ldr	r2, [pc, #152]	; (8003664 <TIM_Base_SetConfig+0xbc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_Base_SetConfig+0x30>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a25      	ldr	r2, [pc, #148]	; (8003668 <TIM_Base_SetConfig+0xc0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d108      	bne.n	80035ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <TIM_Base_SetConfig+0xb8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a19      	ldr	r2, [pc, #100]	; (8003664 <TIM_Base_SetConfig+0xbc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <TIM_Base_SetConfig+0xc0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a07      	ldr	r2, [pc, #28]	; (8003660 <TIM_Base_SetConfig+0xb8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d103      	bne.n	8003650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	615a      	str	r2, [r3, #20]
}
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800

0800366c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e03f      	b.n	8003722 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fb84 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	; 0x24
 80036c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f90b 	bl	80038f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b088      	sub	sp, #32
 800372e:	af02      	add	r7, sp, #8
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b20      	cmp	r3, #32
 8003748:	f040 8083 	bne.w	8003852 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit+0x2e>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e07b      	b.n	8003854 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_UART_Transmit+0x40>
 8003766:	2302      	movs	r3, #2
 8003768:	e074      	b.n	8003854 <HAL_UART_Transmit+0x12a>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2221      	movs	r2, #33	; 0x21
 800377c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003780:	f7fd fc5a 	bl	8001038 <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003792:	e042      	b.n	800381a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037aa:	d122      	bne.n	80037f2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2200      	movs	r2, #0
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f850 	bl	800385c <UART_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e046      	b.n	8003854 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	3302      	adds	r3, #2
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	e017      	b.n	800381a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3301      	adds	r3, #1
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	e013      	b.n	800381a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f82d 	bl	800385c <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e023      	b.n	8003854 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	60ba      	str	r2, [r7, #8]
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1b7      	bne.n	8003794 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2200      	movs	r2, #0
 800382c:	2140      	movs	r1, #64	; 0x40
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f814 	bl	800385c <UART_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e00a      	b.n	8003854 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
  }
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386c:	e02c      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d028      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <UART_WaitOnFlagUntilTimeout+0x30>
 800387c:	f7fd fbdc 	bl	8001038 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	429a      	cmp	r2, r3
 800388a:	d21d      	bcs.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800389a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e00f      	b.n	80038e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d0c3      	beq.n	800386e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800392a:	f023 030c 	bic.w	r3, r3, #12
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	430b      	orrs	r3, r1
 8003936:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a52      	ldr	r2, [pc, #328]	; (8003a9c <UART_SetConfig+0x1ac>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d14e      	bne.n	80039f6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7ff fb8a 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 800395c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	4a4a      	ldr	r2, [pc, #296]	; (8003aa0 <UART_SetConfig+0x1b0>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	0119      	lsls	r1, r3, #4
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	fbb2 f2f3 	udiv	r2, r2, r3
 8003994:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <UART_SetConfig+0x1b0>)
 8003996:	fba3 0302 	umull	r0, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2064      	movs	r0, #100	; 0x64
 800399e:	fb00 f303 	mul.w	r3, r0, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	3332      	adds	r3, #50	; 0x32
 80039a8:	4a3d      	ldr	r2, [pc, #244]	; (8003aa0 <UART_SetConfig+0x1b0>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b4:	4419      	add	r1, r3
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039cc:	4b34      	ldr	r3, [pc, #208]	; (8003aa0 <UART_SetConfig+0x1b0>)
 80039ce:	fba3 0302 	umull	r0, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2064      	movs	r0, #100	; 0x64
 80039d6:	fb00 f303 	mul.w	r3, r0, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	3332      	adds	r3, #50	; 0x32
 80039e0:	4a2f      	ldr	r2, [pc, #188]	; (8003aa0 <UART_SetConfig+0x1b0>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	440a      	add	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80039f4:	e04d      	b.n	8003a92 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80039f6:	f7ff fb27 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 80039fa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009a      	lsls	r2, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	4a23      	ldr	r2, [pc, #140]	; (8003aa0 <UART_SetConfig+0x1b0>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	0119      	lsls	r1, r3, #4
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a32:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <UART_SetConfig+0x1b0>)
 8003a34:	fba3 0302 	umull	r0, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2064      	movs	r0, #100	; 0x64
 8003a3c:	fb00 f303 	mul.w	r3, r0, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	3332      	adds	r3, #50	; 0x32
 8003a46:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <UART_SetConfig+0x1b0>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a52:	4419      	add	r1, r3
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009a      	lsls	r2, r3, #2
 8003a5e:	441a      	add	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <UART_SetConfig+0x1b0>)
 8003a6c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	2064      	movs	r0, #100	; 0x64
 8003a74:	fb00 f303 	mul.w	r3, r0, r3
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	3332      	adds	r3, #50	; 0x32
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <UART_SetConfig+0x1b0>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	f003 020f 	and.w	r2, r3, #15
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	440a      	add	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	51eb851f 	.word	0x51eb851f

08003aa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f103 0208 	add.w	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f103 0208 	add.w	r2, r3, #8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f103 0208 	add.w	r2, r3, #8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d103      	bne.n	8003b60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e00c      	b.n	8003b7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3308      	adds	r3, #8
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	e002      	b.n	8003b6e <vListInsert+0x2e>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d2f6      	bcs.n	8003b68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	601a      	str	r2, [r3, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6892      	ldr	r2, [r2, #8]
 8003bc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6852      	ldr	r2, [r2, #4]
 8003bd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d103      	bne.n	8003be4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	1e5a      	subs	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
	...

08003c04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	e7fe      	b.n	8003c2a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003c2c:	f001 fb3c 	bl	80052a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	68f9      	ldr	r1, [r7, #12]
 8003c3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	441a      	add	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	441a      	add	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	22ff      	movs	r2, #255	; 0xff
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	22ff      	movs	r2, #255	; 0xff
 8003c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d114      	bne.n	8003cac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01a      	beq.n	8003cc0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3310      	adds	r3, #16
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 ff5e 	bl	8004b50 <xTaskRemoveFromEventList>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d012      	beq.n	8003cc0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <xQueueGenericReset+0xcc>)
 8003c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	e009      	b.n	8003cc0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3310      	adds	r3, #16
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fef7 	bl	8003aa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3324      	adds	r3, #36	; 0x24
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fef2 	bl	8003aa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cc0:	f001 fb20 	bl	8005304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cc4:	2301      	movs	r3, #1
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d109      	bne.n	8003cfc <xQueueGenericCreate+0x28>
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e7fe      	b.n	8003cfa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e004      	b.n	8003d12 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	fb02 f303 	mul.w	r3, r2, r3
 8003d10:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3348      	adds	r3, #72	; 0x48
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 fb80 	bl	800541c <pvPortMalloc>
 8003d1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00f      	beq.n	8003d44 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3348      	adds	r3, #72	; 0x48
 8003d28:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d32:	79fa      	ldrb	r2, [r7, #7]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f805 	bl	8003d4e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d44:	69bb      	ldr	r3, [r7, #24]
	}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e002      	b.n	8003d70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	69b8      	ldr	r0, [r7, #24]
 8003d80:	f7ff ff40 	bl	8003c04 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08e      	sub	sp, #56	; 0x38
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <xQueueGenericSend+0x30>
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dba:	e7fe      	b.n	8003dba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <xQueueGenericSend+0x3e>
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <xQueueGenericSend+0x42>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <xQueueGenericSend+0x44>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <xQueueGenericSend+0x5c>
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
 8003de6:	e7fe      	b.n	8003de6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d103      	bne.n	8003df6 <xQueueGenericSend+0x6a>
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <xQueueGenericSend+0x6e>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <xQueueGenericSend+0x70>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <xQueueGenericSend+0x88>
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	e7fe      	b.n	8003e12 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e14:	f001 f856 	bl	8004ec4 <xTaskGetSchedulerState>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d102      	bne.n	8003e24 <xQueueGenericSend+0x98>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <xQueueGenericSend+0x9c>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <xQueueGenericSend+0x9e>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <xQueueGenericSend+0xb6>
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e7fe      	b.n	8003e40 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e42:	f001 fa31 	bl	80052a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <xQueueGenericSend+0xcc>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d129      	bne.n	8003eac <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e5e:	f000 f96b 	bl	8004138 <prvCopyDataToQueue>
 8003e62:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d010      	beq.n	8003e8e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	3324      	adds	r3, #36	; 0x24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fe6d 	bl	8004b50 <xTaskRemoveFromEventList>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e7c:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <xQueueGenericSend+0x1f0>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	e00a      	b.n	8003ea4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e94:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <xQueueGenericSend+0x1f0>)
 8003e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ea4:	f001 fa2e 	bl	8005304 <vPortExitCritical>
				return pdPASS;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e063      	b.n	8003f74 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d103      	bne.n	8003eba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eb2:	f001 fa27 	bl	8005304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e05c      	b.n	8003f74 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fea5 	bl	8004c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ece:	f001 fa19 	bl	8005304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ed2:	f000 fc59 	bl	8004788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ed6:	f001 f9e7 	bl	80052a8 <vPortEnterCritical>
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ee0:	b25b      	sxtb	r3, r3
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d103      	bne.n	8003ef0 <xQueueGenericSend+0x164>
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d103      	bne.n	8003f06 <xQueueGenericSend+0x17a>
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f06:	f001 f9fd 	bl	8005304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f0a:	1d3a      	adds	r2, r7, #4
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fe94 	bl	8004c40 <xTaskCheckForTimeOut>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d124      	bne.n	8003f68 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f20:	f000 fa02 	bl	8004328 <prvIsQueueFull>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d018      	beq.n	8003f5c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	3310      	adds	r3, #16
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fde8 	bl	8004b08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f3a:	f000 f98d 	bl	8004258 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f3e:	f000 fc31 	bl	80047a4 <xTaskResumeAll>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f47f af7c 	bne.w	8003e42 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <xQueueGenericSend+0x1f0>)
 8003f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	e772      	b.n	8003e42 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f5e:	f000 f97b 	bl	8004258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f62:	f000 fc1f 	bl	80047a4 <xTaskResumeAll>
 8003f66:	e76c      	b.n	8003e42 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f6a:	f000 f975 	bl	8004258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f6e:	f000 fc19 	bl	80047a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f72:	2300      	movs	r3, #0
		}
	}
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3738      	adds	r7, #56	; 0x38
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	; 0x30
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <xQueueReceive+0x2e>
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	e7fe      	b.n	8003fac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <xQueueReceive+0x3c>
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <xQueueReceive+0x40>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <xQueueReceive+0x42>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <xQueueReceive+0x5a>
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fda:	f000 ff73 	bl	8004ec4 <xTaskGetSchedulerState>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <xQueueReceive+0x6a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <xQueueReceive+0x6e>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <xQueueReceive+0x70>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <xQueueReceive+0x88>
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e7fe      	b.n	8004006 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004008:	f001 f94e 	bl	80052a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01f      	beq.n	8004058 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800401c:	f000 f8f6 	bl	800420c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	1e5a      	subs	r2, r3, #1
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00f      	beq.n	8004050 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	3310      	adds	r3, #16
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fd8b 	bl	8004b50 <xTaskRemoveFromEventList>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004040:	4b3c      	ldr	r3, [pc, #240]	; (8004134 <xQueueReceive+0x1b4>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004050:	f001 f958 	bl	8005304 <vPortExitCritical>
				return pdPASS;
 8004054:	2301      	movs	r3, #1
 8004056:	e069      	b.n	800412c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800405e:	f001 f951 	bl	8005304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004062:	2300      	movs	r3, #0
 8004064:	e062      	b.n	800412c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800406c:	f107 0310 	add.w	r3, r7, #16
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fdcf 	bl	8004c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004076:	2301      	movs	r3, #1
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800407a:	f001 f943 	bl	8005304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800407e:	f000 fb83 	bl	8004788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004082:	f001 f911 	bl	80052a8 <vPortEnterCritical>
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d103      	bne.n	800409c <xQueueReceive+0x11c>
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a2:	b25b      	sxtb	r3, r3
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d103      	bne.n	80040b2 <xQueueReceive+0x132>
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b2:	f001 f927 	bl	8005304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040b6:	1d3a      	adds	r2, r7, #4
 80040b8:	f107 0310 	add.w	r3, r7, #16
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fdbe 	bl	8004c40 <xTaskCheckForTimeOut>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d123      	bne.n	8004112 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040cc:	f000 f916 	bl	80042fc <prvIsQueueEmpty>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d017      	beq.n	8004106 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	3324      	adds	r3, #36	; 0x24
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fd12 	bl	8004b08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e6:	f000 f8b7 	bl	8004258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040ea:	f000 fb5b 	bl	80047a4 <xTaskResumeAll>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d189      	bne.n	8004008 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <xQueueReceive+0x1b4>)
 80040f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	e780      	b.n	8004008 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004108:	f000 f8a6 	bl	8004258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800410c:	f000 fb4a 	bl	80047a4 <xTaskResumeAll>
 8004110:	e77a      	b.n	8004008 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004114:	f000 f8a0 	bl	8004258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004118:	f000 fb44 	bl	80047a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800411c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800411e:	f000 f8ed 	bl	80042fc <prvIsQueueEmpty>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	f43f af6f 	beq.w	8004008 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800412a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800412c:	4618      	mov	r0, r3
 800412e:	3730      	adds	r7, #48	; 0x30
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	e000ed04 	.word	0xe000ed04

08004138 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10d      	bne.n	8004172 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d14d      	bne.n	80041fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fecc 	bl	8004f00 <xTaskPriorityDisinherit>
 8004168:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	e043      	b.n	80041fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d119      	bne.n	80041ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6898      	ldr	r0, [r3, #8]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	461a      	mov	r2, r3
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	f001 fb42 	bl	800580c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	441a      	add	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d32b      	bcc.n	80041fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	609a      	str	r2, [r3, #8]
 80041aa:	e026      	b.n	80041fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68d8      	ldr	r0, [r3, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	461a      	mov	r2, r3
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	f001 fb28 	bl	800580c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	425b      	negs	r3, r3
 80041c6:	441a      	add	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d207      	bcs.n	80041e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	425b      	negs	r3, r3
 80041e2:	441a      	add	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d105      	bne.n	80041fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004202:	697b      	ldr	r3, [r7, #20]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	441a      	add	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	d303      	bcc.n	8004240 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68d9      	ldr	r1, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	461a      	mov	r2, r3
 800424a:	6838      	ldr	r0, [r7, #0]
 800424c:	f001 fade 	bl	800580c <memcpy>
	}
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004260:	f001 f822 	bl	80052a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800426a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800426c:	e011      	b.n	8004292 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d012      	beq.n	800429c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3324      	adds	r3, #36	; 0x24
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fc68 	bl	8004b50 <xTaskRemoveFromEventList>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004286:	f000 fd3b 	bl	8004d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	3b01      	subs	r3, #1
 800428e:	b2db      	uxtb	r3, r3
 8004290:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	dce9      	bgt.n	800426e <prvUnlockQueue+0x16>
 800429a:	e000      	b.n	800429e <prvUnlockQueue+0x46>
					break;
 800429c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	22ff      	movs	r2, #255	; 0xff
 80042a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042a6:	f001 f82d 	bl	8005304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042aa:	f000 fffd 	bl	80052a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042b6:	e011      	b.n	80042dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3310      	adds	r3, #16
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fc43 	bl	8004b50 <xTaskRemoveFromEventList>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042d0:	f000 fd16 	bl	8004d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042d4:	7bbb      	ldrb	r3, [r7, #14]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	dce9      	bgt.n	80042b8 <prvUnlockQueue+0x60>
 80042e4:	e000      	b.n	80042e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	22ff      	movs	r2, #255	; 0xff
 80042ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042f0:	f001 f808 	bl	8005304 <vPortExitCritical>
}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004304:	f000 ffd0 	bl	80052a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	e001      	b.n	800431a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800431a:	f000 fff3 	bl	8005304 <vPortExitCritical>

	return xReturn;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004330:	f000 ffba 	bl	80052a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	429a      	cmp	r2, r3
 800433e:	d102      	bne.n	8004346 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e001      	b.n	800434a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800434a:	f000 ffdb 	bl	8005304 <vPortExitCritical>

	return xReturn;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08e      	sub	sp, #56	; 0x38
 800435c:	af04      	add	r7, sp, #16
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <xTaskCreateStatic+0x28>
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	623b      	str	r3, [r7, #32]
 800437e:	e7fe      	b.n	800437e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <xTaskCreateStatic+0x42>
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	e7fe      	b.n	8004398 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800439a:	2354      	movs	r3, #84	; 0x54
 800439c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b54      	cmp	r3, #84	; 0x54
 80043a2:	d009      	beq.n	80043b8 <xTaskCreateStatic+0x60>
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e7fe      	b.n	80043b6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01e      	beq.n	80043fc <xTaskCreateStatic+0xa4>
 80043be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01b      	beq.n	80043fc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043d6:	2300      	movs	r3, #0
 80043d8:	9303      	str	r3, [sp, #12]
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	9302      	str	r3, [sp, #8]
 80043de:	f107 0314 	add.w	r3, r7, #20
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f850 	bl	8004494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043f6:	f000 f8cb 	bl	8004590 <prvAddNewTaskToReadyList>
 80043fa:	e001      	b.n	8004400 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004400:	697b      	ldr	r3, [r7, #20]
	}
 8004402:	4618      	mov	r0, r3
 8004404:	3728      	adds	r7, #40	; 0x28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800440a:	b580      	push	{r7, lr}
 800440c:	b08c      	sub	sp, #48	; 0x30
 800440e:	af04      	add	r7, sp, #16
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fffc 	bl	800541c <pvPortMalloc>
 8004424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00e      	beq.n	800444a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800442c:	2054      	movs	r0, #84	; 0x54
 800442e:	f000 fff5 	bl	800541c <pvPortMalloc>
 8004432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
 8004440:	e005      	b.n	800444e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004442:	6978      	ldr	r0, [r7, #20]
 8004444:	f001 f8ac 	bl	80055a0 <vPortFree>
 8004448:	e001      	b.n	800444e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d017      	beq.n	8004484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	2300      	movs	r3, #0
 8004460:	9303      	str	r3, [sp, #12]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	9302      	str	r3, [sp, #8]
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f80e 	bl	8004494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004478:	69f8      	ldr	r0, [r7, #28]
 800447a:	f000 f889 	bl	8004590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800447e:	2301      	movs	r3, #1
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e002      	b.n	800448a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
 8004488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800448a:	69bb      	ldr	r3, [r7, #24]
	}
 800448c:	4618      	mov	r0, r3
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044ac:	3b01      	subs	r3, #1
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f023 0307 	bic.w	r3, r3, #7
 80044ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <prvInitialiseNewTask+0x46>
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e7fe      	b.n	80044d8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044da:	2300      	movs	r3, #0
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	e012      	b.n	8004506 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	7819      	ldrb	r1, [r3, #0]
 80044e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	3334      	adds	r3, #52	; 0x34
 80044f0:	460a      	mov	r2, r1
 80044f2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	4413      	add	r3, r2
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	3301      	adds	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d9e9      	bls.n	80044e0 <prvInitialiseNewTask+0x4c>
 800450c:	e000      	b.n	8004510 <prvInitialiseNewTask+0x7c>
		{
			break;
 800450e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	2b06      	cmp	r3, #6
 800451c:	d901      	bls.n	8004522 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800451e:	2306      	movs	r3, #6
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	2200      	movs	r2, #0
 8004532:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	3304      	adds	r3, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fad2 	bl	8003ae2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	3318      	adds	r3, #24
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff facd 	bl	8003ae2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	f1c3 0207 	rsb	r2, r3, #7
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2200      	movs	r2, #0
 8004562:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	69b8      	ldr	r0, [r7, #24]
 8004572:	f000 fdaf 	bl	80050d4 <pxPortInitialiseStack>
 8004576:	4602      	mov	r2, r0
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004586:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004588:	bf00      	nop
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004598:	f000 fe86 	bl	80052a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800459c:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <prvAddNewTaskToReadyList+0xb8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a29      	ldr	r2, [pc, #164]	; (8004648 <prvAddNewTaskToReadyList+0xb8>)
 80045a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <prvAddNewTaskToReadyList+0xbc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ae:	4a27      	ldr	r2, [pc, #156]	; (800464c <prvAddNewTaskToReadyList+0xbc>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045b4:	4b24      	ldr	r3, [pc, #144]	; (8004648 <prvAddNewTaskToReadyList+0xb8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d110      	bne.n	80045de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045bc:	f000 fbc4 	bl	8004d48 <prvInitialiseTaskLists>
 80045c0:	e00d      	b.n	80045de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <prvAddNewTaskToReadyList+0xc0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <prvAddNewTaskToReadyList+0xbc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d802      	bhi.n	80045de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045d8:	4a1c      	ldr	r2, [pc, #112]	; (800464c <prvAddNewTaskToReadyList+0xbc>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045de:	4b1d      	ldr	r3, [pc, #116]	; (8004654 <prvAddNewTaskToReadyList+0xc4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <prvAddNewTaskToReadyList+0xc4>)
 80045e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2201      	movs	r2, #1
 80045ee:	409a      	lsls	r2, r3
 80045f0:	4b19      	ldr	r3, [pc, #100]	; (8004658 <prvAddNewTaskToReadyList+0xc8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	4a18      	ldr	r2, [pc, #96]	; (8004658 <prvAddNewTaskToReadyList+0xc8>)
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4a15      	ldr	r2, [pc, #84]	; (800465c <prvAddNewTaskToReadyList+0xcc>)
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3304      	adds	r3, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f7ff fa72 	bl	8003afa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004616:	f000 fe75 	bl	8005304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <prvAddNewTaskToReadyList+0xc0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00e      	beq.n	8004640 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <prvAddNewTaskToReadyList+0xbc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	429a      	cmp	r2, r3
 800462e:	d207      	bcs.n	8004640 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <prvAddNewTaskToReadyList+0xd0>)
 8004632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	200003c0 	.word	0x200003c0
 800464c:	200002c0 	.word	0x200002c0
 8004650:	200003cc 	.word	0x200003cc
 8004654:	200003dc 	.word	0x200003dc
 8004658:	200003c8 	.word	0x200003c8
 800465c:	200002c4 	.word	0x200002c4
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d016      	beq.n	80046a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004676:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <vTaskDelay+0x60>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <vTaskDelay+0x2e>
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	e7fe      	b.n	8004690 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004692:	f000 f879 	bl	8004788 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004696:	2100      	movs	r1, #0
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fcb5 	bl	8005008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800469e:	f000 f881 	bl	80047a4 <xTaskResumeAll>
 80046a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d107      	bne.n	80046ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <vTaskDelay+0x64>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	200003e8 	.word	0x200003e8
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046da:	463a      	mov	r2, r7
 80046dc:	1d39      	adds	r1, r7, #4
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb fd34 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	9202      	str	r2, [sp, #8]
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	2300      	movs	r3, #0
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	2300      	movs	r3, #0
 80046f8:	460a      	mov	r2, r1
 80046fa:	491d      	ldr	r1, [pc, #116]	; (8004770 <vTaskStartScheduler+0xa4>)
 80046fc:	481d      	ldr	r0, [pc, #116]	; (8004774 <vTaskStartScheduler+0xa8>)
 80046fe:	f7ff fe2b 	bl	8004358 <xTaskCreateStatic>
 8004702:	4602      	mov	r2, r0
 8004704:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <vTaskStartScheduler+0xac>)
 8004706:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <vTaskStartScheduler+0xac>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004710:	2301      	movs	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e001      	b.n	800471a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d115      	bne.n	800474c <vTaskStartScheduler+0x80>
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <vTaskStartScheduler+0xb0>)
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <vTaskStartScheduler+0xb4>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <vTaskStartScheduler+0xb8>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004746:	f000 fd3f 	bl	80051c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800474a:	e00d      	b.n	8004768 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d109      	bne.n	8004768 <vTaskStartScheduler+0x9c>
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e7fe      	b.n	8004766 <vTaskStartScheduler+0x9a>
}
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	080058dc 	.word	0x080058dc
 8004774:	08004d19 	.word	0x08004d19
 8004778:	200003e4 	.word	0x200003e4
 800477c:	200003e0 	.word	0x200003e0
 8004780:	200003cc 	.word	0x200003cc
 8004784:	200003c4 	.word	0x200003c4

08004788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <vTaskSuspendAll+0x18>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3301      	adds	r3, #1
 8004792:	4a03      	ldr	r2, [pc, #12]	; (80047a0 <vTaskSuspendAll+0x18>)
 8004794:	6013      	str	r3, [r2, #0]
}
 8004796:	bf00      	nop
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	200003e8 	.word	0x200003e8

080047a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <xTaskResumeAll+0x114>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <xTaskResumeAll+0x2a>
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	e7fe      	b.n	80047cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ce:	f000 fd6b 	bl	80052a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047d2:	4b39      	ldr	r3, [pc, #228]	; (80048b8 <xTaskResumeAll+0x114>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	4a37      	ldr	r2, [pc, #220]	; (80048b8 <xTaskResumeAll+0x114>)
 80047da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047dc:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <xTaskResumeAll+0x114>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d161      	bne.n	80048a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <xTaskResumeAll+0x118>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05d      	beq.n	80048a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ec:	e02e      	b.n	800484c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80047ee:	4b34      	ldr	r3, [pc, #208]	; (80048c0 <xTaskResumeAll+0x11c>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3318      	adds	r3, #24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff f9d8 	bl	8003bb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff f9d3 	bl	8003bb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	2201      	movs	r2, #1
 8004810:	409a      	lsls	r2, r3
 8004812:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <xTaskResumeAll+0x120>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	4a2a      	ldr	r2, [pc, #168]	; (80048c4 <xTaskResumeAll+0x120>)
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <xTaskResumeAll+0x124>)
 800482a:	441a      	add	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7ff f961 	bl	8003afa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <xTaskResumeAll+0x128>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004846:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <xTaskResumeAll+0x12c>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800484c:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <xTaskResumeAll+0x11c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1cc      	bne.n	80047ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800485a:	f000 fb0f 	bl	8004e7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800485e:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <xTaskResumeAll+0x130>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800486a:	f000 f837 	bl	80048dc <xTaskIncrementTick>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004874:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <xTaskResumeAll+0x12c>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3b01      	subs	r3, #1
 800487e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f1      	bne.n	800486a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004886:	4b13      	ldr	r3, [pc, #76]	; (80048d4 <xTaskResumeAll+0x130>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <xTaskResumeAll+0x12c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <xTaskResumeAll+0x134>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048a8:	f000 fd2c 	bl	8005304 <vPortExitCritical>

	return xAlreadyYielded;
 80048ac:	68bb      	ldr	r3, [r7, #8]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	200003e8 	.word	0x200003e8
 80048bc:	200003c0 	.word	0x200003c0
 80048c0:	20000380 	.word	0x20000380
 80048c4:	200003c8 	.word	0x200003c8
 80048c8:	200002c4 	.word	0x200002c4
 80048cc:	200002c0 	.word	0x200002c0
 80048d0:	200003d4 	.word	0x200003d4
 80048d4:	200003d0 	.word	0x200003d0
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e6:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <xTaskIncrementTick+0x14c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 808c 	bne.w	8004a08 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048f0:	4b4e      	ldr	r3, [pc, #312]	; (8004a2c <xTaskIncrementTick+0x150>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048f8:	4a4c      	ldr	r2, [pc, #304]	; (8004a2c <xTaskIncrementTick+0x150>)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d11f      	bne.n	8004944 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004904:	4b4a      	ldr	r3, [pc, #296]	; (8004a30 <xTaskIncrementTick+0x154>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <xTaskIncrementTick+0x46>
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	e7fe      	b.n	8004920 <xTaskIncrementTick+0x44>
 8004922:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <xTaskIncrementTick+0x154>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <xTaskIncrementTick+0x158>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a40      	ldr	r2, [pc, #256]	; (8004a30 <xTaskIncrementTick+0x154>)
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <xTaskIncrementTick+0x158>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b40      	ldr	r3, [pc, #256]	; (8004a38 <xTaskIncrementTick+0x15c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	4a3e      	ldr	r2, [pc, #248]	; (8004a38 <xTaskIncrementTick+0x15c>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	f000 fa9c 	bl	8004e7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004944:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <xTaskIncrementTick+0x160>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	d34d      	bcc.n	80049ea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800494e:	4b38      	ldr	r3, [pc, #224]	; (8004a30 <xTaskIncrementTick+0x154>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <xTaskIncrementTick+0x80>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <xTaskIncrementTick+0x82>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d004      	beq.n	800496c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004962:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <xTaskIncrementTick+0x160>)
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	601a      	str	r2, [r3, #0]
					break;
 800496a:	e03e      	b.n	80049ea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800496c:	4b30      	ldr	r3, [pc, #192]	; (8004a30 <xTaskIncrementTick+0x154>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d203      	bcs.n	800498c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004984:	4a2d      	ldr	r2, [pc, #180]	; (8004a3c <xTaskIncrementTick+0x160>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6013      	str	r3, [r2, #0]
						break;
 800498a:	e02e      	b.n	80049ea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	3304      	adds	r3, #4
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff f90d 	bl	8003bb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d004      	beq.n	80049a8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	3318      	adds	r3, #24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff f904 	bl	8003bb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	2201      	movs	r2, #1
 80049ae:	409a      	lsls	r2, r3
 80049b0:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <xTaskIncrementTick+0x164>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	4a22      	ldr	r2, [pc, #136]	; (8004a40 <xTaskIncrementTick+0x164>)
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <xTaskIncrementTick+0x168>)
 80049c8:	441a      	add	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3304      	adds	r3, #4
 80049ce:	4619      	mov	r1, r3
 80049d0:	4610      	mov	r0, r2
 80049d2:	f7ff f892 	bl	8003afa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <xTaskIncrementTick+0x16c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d3b4      	bcc.n	800494e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e8:	e7b1      	b.n	800494e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049ea:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <xTaskIncrementTick+0x16c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4914      	ldr	r1, [pc, #80]	; (8004a44 <xTaskIncrementTick+0x168>)
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d907      	bls.n	8004a12 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e004      	b.n	8004a12 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a08:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <xTaskIncrementTick+0x170>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4a0f      	ldr	r2, [pc, #60]	; (8004a4c <xTaskIncrementTick+0x170>)
 8004a10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <xTaskIncrementTick+0x174>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a1e:	697b      	ldr	r3, [r7, #20]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	200003e8 	.word	0x200003e8
 8004a2c:	200003c4 	.word	0x200003c4
 8004a30:	20000378 	.word	0x20000378
 8004a34:	2000037c 	.word	0x2000037c
 8004a38:	200003d8 	.word	0x200003d8
 8004a3c:	200003e0 	.word	0x200003e0
 8004a40:	200003c8 	.word	0x200003c8
 8004a44:	200002c4 	.word	0x200002c4
 8004a48:	200002c0 	.word	0x200002c0
 8004a4c:	200003d0 	.word	0x200003d0
 8004a50:	200003d4 	.word	0x200003d4

08004a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a5a:	4b26      	ldr	r3, [pc, #152]	; (8004af4 <vTaskSwitchContext+0xa0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a62:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <vTaskSwitchContext+0xa4>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a68:	e03e      	b.n	8004ae8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004a6a:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <vTaskSwitchContext+0xa4>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a70:	4b22      	ldr	r3, [pc, #136]	; (8004afc <vTaskSwitchContext+0xa8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	fab3 f383 	clz	r3, r3
 8004a7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a7e:	7afb      	ldrb	r3, [r7, #11]
 8004a80:	f1c3 031f 	rsb	r3, r3, #31
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	491e      	ldr	r1, [pc, #120]	; (8004b00 <vTaskSwitchContext+0xac>)
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <vTaskSwitchContext+0x5a>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	e7fe      	b.n	8004aac <vTaskSwitchContext+0x58>
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <vTaskSwitchContext+0xac>)
 8004aba:	4413      	add	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d104      	bne.n	8004ade <vTaskSwitchContext+0x8a>
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <vTaskSwitchContext+0xb0>)
 8004ae6:	6013      	str	r3, [r2, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	200003e8 	.word	0x200003e8
 8004af8:	200003d4 	.word	0x200003d4
 8004afc:	200003c8 	.word	0x200003c8
 8004b00:	200002c4 	.word	0x200002c4
 8004b04:	200002c0 	.word	0x200002c0

08004b08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <vTaskPlaceOnEventList+0x24>
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e7fe      	b.n	8004b2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <vTaskPlaceOnEventList+0x44>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3318      	adds	r3, #24
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff f803 	bl	8003b40 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	6838      	ldr	r0, [r7, #0]
 8004b3e:	f000 fa63 	bl	8005008 <prvAddCurrentTaskToDelayedList>
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	200002c0 	.word	0x200002c0

08004b50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <xTaskRemoveFromEventList+0x2a>
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e7fe      	b.n	8004b78 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff f816 	bl	8003bb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <xTaskRemoveFromEventList+0xac>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11c      	bne.n	8004bc6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff f80d 	bl	8003bb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <xTaskRemoveFromEventList+0xb0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <xTaskRemoveFromEventList+0xb0>)
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <xTaskRemoveFromEventList+0xb4>)
 8004bb6:	441a      	add	r2, r3
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fe ff9b 	bl	8003afa <vListInsertEnd>
 8004bc4:	e005      	b.n	8004bd2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3318      	adds	r3, #24
 8004bca:	4619      	mov	r1, r3
 8004bcc:	480e      	ldr	r0, [pc, #56]	; (8004c08 <xTaskRemoveFromEventList+0xb8>)
 8004bce:	f7fe ff94 	bl	8003afa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <xTaskRemoveFromEventList+0xbc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d905      	bls.n	8004bec <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <xTaskRemoveFromEventList+0xc0>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e001      	b.n	8004bf0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004bf0:	697b      	ldr	r3, [r7, #20]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	200003e8 	.word	0x200003e8
 8004c00:	200003c8 	.word	0x200003c8
 8004c04:	200002c4 	.word	0x200002c4
 8004c08:	20000380 	.word	0x20000380
 8004c0c:	200002c0 	.word	0x200002c0
 8004c10:	200003d4 	.word	0x200003d4

08004c14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <vTaskInternalSetTimeOutState+0x24>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <vTaskInternalSetTimeOutState+0x28>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	605a      	str	r2, [r3, #4]
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	200003d8 	.word	0x200003d8
 8004c3c:	200003c4 	.word	0x200003c4

08004c40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <xTaskCheckForTimeOut+0x24>
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e7fe      	b.n	8004c62 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <xTaskCheckForTimeOut+0x3e>
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e7fe      	b.n	8004c7c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004c7e:	f000 fb13 	bl	80052a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c82:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <xTaskCheckForTimeOut+0xb8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9a:	d102      	bne.n	8004ca2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e023      	b.n	8004cea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <xTaskCheckForTimeOut+0xbc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d007      	beq.n	8004cbe <xTaskCheckForTimeOut+0x7e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d302      	bcc.n	8004cbe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e015      	b.n	8004cea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d20b      	bcs.n	8004ce0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad2      	subs	r2, r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff9d 	bl	8004c14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e004      	b.n	8004cea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cea:	f000 fb0b 	bl	8005304 <vPortExitCritical>

	return xReturn;
 8004cee:	69fb      	ldr	r3, [r7, #28]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	200003c4 	.word	0x200003c4
 8004cfc:	200003d8 	.word	0x200003d8

08004d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <vTaskMissedYield+0x14>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	200003d4 	.word	0x200003d4

08004d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d20:	f000 f852 	bl	8004dc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <prvIdleTask+0x28>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d9f9      	bls.n	8004d20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <prvIdleTask+0x2c>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d3c:	e7f0      	b.n	8004d20 <prvIdleTask+0x8>
 8004d3e:	bf00      	nop
 8004d40:	200002c4 	.word	0x200002c4
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	e00c      	b.n	8004d6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <prvInitialiseTaskLists+0x60>)
 8004d60:	4413      	add	r3, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fe9e 	bl	8003aa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b06      	cmp	r3, #6
 8004d72:	d9ef      	bls.n	8004d54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d74:	480d      	ldr	r0, [pc, #52]	; (8004dac <prvInitialiseTaskLists+0x64>)
 8004d76:	f7fe fe95 	bl	8003aa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d7a:	480d      	ldr	r0, [pc, #52]	; (8004db0 <prvInitialiseTaskLists+0x68>)
 8004d7c:	f7fe fe92 	bl	8003aa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d80:	480c      	ldr	r0, [pc, #48]	; (8004db4 <prvInitialiseTaskLists+0x6c>)
 8004d82:	f7fe fe8f 	bl	8003aa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d86:	480c      	ldr	r0, [pc, #48]	; (8004db8 <prvInitialiseTaskLists+0x70>)
 8004d88:	f7fe fe8c 	bl	8003aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d8c:	480b      	ldr	r0, [pc, #44]	; (8004dbc <prvInitialiseTaskLists+0x74>)
 8004d8e:	f7fe fe89 	bl	8003aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <prvInitialiseTaskLists+0x78>)
 8004d94:	4a05      	ldr	r2, [pc, #20]	; (8004dac <prvInitialiseTaskLists+0x64>)
 8004d96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d98:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <prvInitialiseTaskLists+0x7c>)
 8004d9a:	4a05      	ldr	r2, [pc, #20]	; (8004db0 <prvInitialiseTaskLists+0x68>)
 8004d9c:	601a      	str	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	200002c4 	.word	0x200002c4
 8004dac:	20000350 	.word	0x20000350
 8004db0:	20000364 	.word	0x20000364
 8004db4:	20000380 	.word	0x20000380
 8004db8:	20000394 	.word	0x20000394
 8004dbc:	200003ac 	.word	0x200003ac
 8004dc0:	20000378 	.word	0x20000378
 8004dc4:	2000037c 	.word	0x2000037c

08004dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dce:	e019      	b.n	8004e04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004dd0:	f000 fa6a 	bl	80052a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <prvCheckTasksWaitingTermination+0x4c>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe fee5 	bl	8003bb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <prvCheckTasksWaitingTermination+0x50>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <prvCheckTasksWaitingTermination+0x50>)
 8004dee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <prvCheckTasksWaitingTermination+0x54>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <prvCheckTasksWaitingTermination+0x54>)
 8004df8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dfa:	f000 fa83 	bl	8005304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f80e 	bl	8004e20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <prvCheckTasksWaitingTermination+0x54>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e1      	bne.n	8004dd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000394 	.word	0x20000394
 8004e18:	200003c0 	.word	0x200003c0
 8004e1c:	200003a8 	.word	0x200003a8

08004e20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d108      	bne.n	8004e44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fbb2 	bl	80055a0 <vPortFree>
				vPortFree( pxTCB );
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fbaf 	bl	80055a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e42:	e017      	b.n	8004e74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d103      	bne.n	8004e56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fba6 	bl	80055a0 <vPortFree>
	}
 8004e54:	e00e      	b.n	8004e74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d009      	beq.n	8004e74 <prvDeleteTCB+0x54>
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e7fe      	b.n	8004e72 <prvDeleteTCB+0x52>
	}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e82:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <prvResetNextTaskUnblockTime+0x40>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <prvResetNextTaskUnblockTime+0x14>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <prvResetNextTaskUnblockTime+0x16>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <prvResetNextTaskUnblockTime+0x44>)
 8004e98:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e9e:	e008      	b.n	8004eb2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <prvResetNextTaskUnblockTime+0x40>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <prvResetNextTaskUnblockTime+0x44>)
 8004eb0:	6013      	str	r3, [r2, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	20000378 	.word	0x20000378
 8004ec0:	200003e0 	.word	0x200003e0

08004ec4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <xTaskGetSchedulerState+0x34>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	e008      	b.n	8004eea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <xTaskGetSchedulerState+0x38>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	e001      	b.n	8004eea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004eea:	687b      	ldr	r3, [r7, #4]
	}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	200003cc 	.word	0x200003cc
 8004efc:	200003e8 	.word	0x200003e8

08004f00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d06c      	beq.n	8004ff0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f16:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <xTaskPriorityDisinherit+0xfc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d009      	beq.n	8004f34 <xTaskPriorityDisinherit+0x34>
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e7fe      	b.n	8004f32 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <xTaskPriorityDisinherit+0x50>
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	e7fe      	b.n	8004f4e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f54:	1e5a      	subs	r2, r3, #1
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d044      	beq.n	8004ff0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d140      	bne.n	8004ff0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe fe1c 	bl	8003bb0 <uxListRemove>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d115      	bne.n	8004faa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f82:	491f      	ldr	r1, [pc, #124]	; (8005000 <xTaskPriorityDisinherit+0x100>)
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xTaskPriorityDisinherit+0xaa>
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	2201      	movs	r2, #1
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	4b18      	ldr	r3, [pc, #96]	; (8005004 <xTaskPriorityDisinherit+0x104>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	4a17      	ldr	r2, [pc, #92]	; (8005004 <xTaskPriorityDisinherit+0x104>)
 8004fa8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	f1c3 0207 	rsb	r2, r3, #7
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <xTaskPriorityDisinherit+0x104>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	4a0d      	ldr	r2, [pc, #52]	; (8005004 <xTaskPriorityDisinherit+0x104>)
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4a08      	ldr	r2, [pc, #32]	; (8005000 <xTaskPriorityDisinherit+0x100>)
 8004fde:	441a      	add	r2, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fe fd87 	bl	8003afa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fec:	2301      	movs	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ff0:	697b      	ldr	r3, [r7, #20]
	}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	200002c0 	.word	0x200002c0
 8005000:	200002c4 	.word	0x200002c4
 8005004:	200003c8 	.word	0x200003c8

08005008 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005012:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005018:	4b28      	ldr	r3, [pc, #160]	; (80050bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3304      	adds	r3, #4
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fdc6 	bl	8003bb0 <uxListRemove>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	2201      	movs	r2, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43da      	mvns	r2, r3
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4013      	ands	r3, r2
 800503e:	4a20      	ldr	r2, [pc, #128]	; (80050c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005040:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d10a      	bne.n	8005060 <prvAddCurrentTaskToDelayedList+0x58>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	481a      	ldr	r0, [pc, #104]	; (80050c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800505a:	f7fe fd4e 	bl	8003afa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800505e:	e026      	b.n	80050ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005068:	4b14      	ldr	r3, [pc, #80]	; (80050bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	429a      	cmp	r2, r3
 8005076:	d209      	bcs.n	800508c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f7fe fd5b 	bl	8003b40 <vListInsert>
}
 800508a:	e010      	b.n	80050ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3304      	adds	r3, #4
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7fe fd51 	bl	8003b40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d202      	bcs.n	80050ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050a8:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6013      	str	r3, [r2, #0]
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	200003c4 	.word	0x200003c4
 80050bc:	200002c0 	.word	0x200002c0
 80050c0:	200003c8 	.word	0x200003c8
 80050c4:	200003ac 	.word	0x200003ac
 80050c8:	2000037c 	.word	0x2000037c
 80050cc:	20000378 	.word	0x20000378
 80050d0:	200003e0 	.word	0x200003e0

080050d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3b04      	subs	r3, #4
 80050e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3b04      	subs	r3, #4
 80050f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f023 0201 	bic.w	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3b04      	subs	r3, #4
 8005102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <pxPortInitialiseStack+0x54>)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3b14      	subs	r3, #20
 800510e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3b20      	subs	r3, #32
 800511a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800511c:	68fb      	ldr	r3, [r7, #12]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr
 8005128:	0800512d 	.word	0x0800512d

0800512c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005132:	2300      	movs	r3, #0
 8005134:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <prvTaskExitError+0x4c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	d009      	beq.n	8005154 <prvTaskExitError+0x28>
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e7fe      	b.n	8005152 <prvTaskExitError+0x26>
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005166:	bf00      	nop
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0fc      	beq.n	8005168 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	2000004c 	.word	0x2000004c
 800517c:	00000000 	.word	0x00000000

08005180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <pxCurrentTCBConst2>)
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	6808      	ldr	r0, [r1, #0]
 8005186:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800518a:	f380 8809 	msr	PSP, r0
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8811 	msr	BASEPRI, r0
 800519a:	f04e 0e0d 	orr.w	lr, lr, #13
 800519e:	4770      	bx	lr

080051a0 <pxCurrentTCBConst2>:
 80051a0:	200002c0 	.word	0x200002c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80051a8:	4806      	ldr	r0, [pc, #24]	; (80051c4 <prvPortStartFirstTask+0x1c>)
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	6800      	ldr	r0, [r0, #0]
 80051ae:	f380 8808 	msr	MSP, r0
 80051b2:	b662      	cpsie	i
 80051b4:	b661      	cpsie	f
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	df00      	svc	0
 80051c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051c2:	bf00      	nop
 80051c4:	e000ed08 	.word	0xe000ed08

080051c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051ce:	4b31      	ldr	r3, [pc, #196]	; (8005294 <xPortStartScheduler+0xcc>)
 80051d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	22ff      	movs	r2, #255	; 0xff
 80051de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	4b29      	ldr	r3, [pc, #164]	; (8005298 <xPortStartScheduler+0xd0>)
 80051f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051f6:	4b29      	ldr	r3, [pc, #164]	; (800529c <xPortStartScheduler+0xd4>)
 80051f8:	2207      	movs	r2, #7
 80051fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051fc:	e009      	b.n	8005212 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80051fe:	4b27      	ldr	r3, [pc, #156]	; (800529c <xPortStartScheduler+0xd4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3b01      	subs	r3, #1
 8005204:	4a25      	ldr	r2, [pc, #148]	; (800529c <xPortStartScheduler+0xd4>)
 8005206:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	b2db      	uxtb	r3, r3
 8005210:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521a:	2b80      	cmp	r3, #128	; 0x80
 800521c:	d0ef      	beq.n	80051fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800521e:	4b1f      	ldr	r3, [pc, #124]	; (800529c <xPortStartScheduler+0xd4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1c3 0307 	rsb	r3, r3, #7
 8005226:	2b04      	cmp	r3, #4
 8005228:	d009      	beq.n	800523e <xPortStartScheduler+0x76>
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	e7fe      	b.n	800523c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <xPortStartScheduler+0xd4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <xPortStartScheduler+0xd4>)
 8005246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005248:	4b14      	ldr	r3, [pc, #80]	; (800529c <xPortStartScheduler+0xd4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005250:	4a12      	ldr	r2, [pc, #72]	; (800529c <xPortStartScheduler+0xd4>)
 8005252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800525c:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <xPortStartScheduler+0xd8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0f      	ldr	r2, [pc, #60]	; (80052a0 <xPortStartScheduler+0xd8>)
 8005262:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <xPortStartScheduler+0xd8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a0c      	ldr	r2, [pc, #48]	; (80052a0 <xPortStartScheduler+0xd8>)
 800526e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005274:	f000 f8b0 	bl	80053d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <xPortStartScheduler+0xdc>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800527e:	f7ff ff93 	bl	80051a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005282:	f7ff fbe7 	bl	8004a54 <vTaskSwitchContext>
	prvTaskExitError();
 8005286:	f7ff ff51 	bl	800512c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	e000e400 	.word	0xe000e400
 8005298:	200003ec 	.word	0x200003ec
 800529c:	200003f0 	.word	0x200003f0
 80052a0:	e000ed20 	.word	0xe000ed20
 80052a4:	2000004c 	.word	0x2000004c

080052a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <vPortEnterCritical+0x54>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3301      	adds	r3, #1
 80052c6:	4a0d      	ldr	r2, [pc, #52]	; (80052fc <vPortEnterCritical+0x54>)
 80052c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052ca:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <vPortEnterCritical+0x54>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d10e      	bne.n	80052f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <vPortEnterCritical+0x58>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d009      	beq.n	80052f0 <vPortEnterCritical+0x48>
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	e7fe      	b.n	80052ee <vPortEnterCritical+0x46>
	}
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	2000004c 	.word	0x2000004c
 8005300:	e000ed04 	.word	0xe000ed04

08005304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800530a:	4b10      	ldr	r3, [pc, #64]	; (800534c <vPortExitCritical+0x48>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <vPortExitCritical+0x22>
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	e7fe      	b.n	8005324 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <vPortExitCritical+0x48>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3b01      	subs	r3, #1
 800532c:	4a07      	ldr	r2, [pc, #28]	; (800534c <vPortExitCritical+0x48>)
 800532e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <vPortExitCritical+0x48>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <vPortExitCritical+0x3e>
 8005338:	2300      	movs	r3, #0
 800533a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr
 800534c:	2000004c 	.word	0x2000004c

08005350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005350:	f3ef 8009 	mrs	r0, PSP
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <pxCurrentTCBConst>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005360:	6010      	str	r0, [r2, #0]
 8005362:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005366:	f04f 0050 	mov.w	r0, #80	; 0x50
 800536a:	f380 8811 	msr	BASEPRI, r0
 800536e:	f7ff fb71 	bl	8004a54 <vTaskSwitchContext>
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8811 	msr	BASEPRI, r0
 800537a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	6808      	ldr	r0, [r1, #0]
 8005382:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005386:	f380 8809 	msr	PSP, r0
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	4770      	bx	lr

08005390 <pxCurrentTCBConst>:
 8005390:	200002c0 	.word	0x200002c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop

08005398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053b0:	f7ff fa94 	bl	80048dc <xTaskIncrementTick>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <SysTick_Handler+0x3c>)
 80053bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <vPortSetupTimerInterrupt+0x30>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <vPortSetupTimerInterrupt+0x34>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <vPortSetupTimerInterrupt+0x38>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a09      	ldr	r2, [pc, #36]	; (8005414 <vPortSetupTimerInterrupt+0x3c>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	099b      	lsrs	r3, r3, #6
 80053f4:	4a08      	ldr	r2, [pc, #32]	; (8005418 <vPortSetupTimerInterrupt+0x40>)
 80053f6:	3b01      	subs	r3, #1
 80053f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053fa:	4b03      	ldr	r3, [pc, #12]	; (8005408 <vPortSetupTimerInterrupt+0x30>)
 80053fc:	2207      	movs	r2, #7
 80053fe:	601a      	str	r2, [r3, #0]
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	e000e010 	.word	0xe000e010
 800540c:	e000e018 	.word	0xe000e018
 8005410:	20000040 	.word	0x20000040
 8005414:	10624dd3 	.word	0x10624dd3
 8005418:	e000e014 	.word	0xe000e014

0800541c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005428:	f7ff f9ae 	bl	8004788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800542c:	4b57      	ldr	r3, [pc, #348]	; (800558c <pvPortMalloc+0x170>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005434:	f000 f90c 	bl	8005650 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005438:	4b55      	ldr	r3, [pc, #340]	; (8005590 <pvPortMalloc+0x174>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	f040 808c 	bne.w	800555e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01c      	beq.n	8005486 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800544c:	2208      	movs	r2, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	2b00      	cmp	r3, #0
 800545c:	d013      	beq.n	8005486 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f023 0307 	bic.w	r3, r3, #7
 8005464:	3308      	adds	r3, #8
 8005466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <pvPortMalloc+0x6a>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e7fe      	b.n	8005484 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d068      	beq.n	800555e <pvPortMalloc+0x142>
 800548c:	4b41      	ldr	r3, [pc, #260]	; (8005594 <pvPortMalloc+0x178>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	429a      	cmp	r2, r3
 8005494:	d863      	bhi.n	800555e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005496:	4b40      	ldr	r3, [pc, #256]	; (8005598 <pvPortMalloc+0x17c>)
 8005498:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800549a:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <pvPortMalloc+0x17c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054a0:	e004      	b.n	80054ac <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d903      	bls.n	80054be <pvPortMalloc+0xa2>
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f1      	bne.n	80054a2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054be:	4b33      	ldr	r3, [pc, #204]	; (800558c <pvPortMalloc+0x170>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d04a      	beq.n	800555e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2208      	movs	r2, #8
 80054ce:	4413      	add	r3, r2
 80054d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	1ad2      	subs	r2, r2, r3
 80054e2:	2308      	movs	r3, #8
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d91e      	bls.n	8005528 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <pvPortMalloc+0xf4>
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	e7fe      	b.n	800550e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005522:	69b8      	ldr	r0, [r7, #24]
 8005524:	f000 f8f6 	bl	8005714 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005528:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <pvPortMalloc+0x178>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	4a18      	ldr	r2, [pc, #96]	; (8005594 <pvPortMalloc+0x178>)
 8005534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005536:	4b17      	ldr	r3, [pc, #92]	; (8005594 <pvPortMalloc+0x178>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b18      	ldr	r3, [pc, #96]	; (800559c <pvPortMalloc+0x180>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d203      	bcs.n	800554a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005542:	4b14      	ldr	r3, [pc, #80]	; (8005594 <pvPortMalloc+0x178>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a15      	ldr	r2, [pc, #84]	; (800559c <pvPortMalloc+0x180>)
 8005548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	4b10      	ldr	r3, [pc, #64]	; (8005590 <pvPortMalloc+0x174>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	431a      	orrs	r2, r3
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800555e:	f7ff f921 	bl	80047a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <pvPortMalloc+0x164>
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e7fe      	b.n	800557e <pvPortMalloc+0x162>
	return pvReturn;
 8005580:	69fb      	ldr	r3, [r7, #28]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3728      	adds	r7, #40	; 0x28
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000ffc 	.word	0x20000ffc
 8005590:	20001008 	.word	0x20001008
 8005594:	20001000 	.word	0x20001000
 8005598:	20000ff4 	.word	0x20000ff4
 800559c:	20001004 	.word	0x20001004

080055a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d046      	beq.n	8005640 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055b2:	2308      	movs	r3, #8
 80055b4:	425b      	negs	r3, r3
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4413      	add	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	4b20      	ldr	r3, [pc, #128]	; (8005648 <vPortFree+0xa8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <vPortFree+0x42>
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e7fe      	b.n	80055e0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <vPortFree+0x5e>
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	e7fe      	b.n	80055fc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	4b11      	ldr	r3, [pc, #68]	; (8005648 <vPortFree+0xa8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4013      	ands	r3, r2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d019      	beq.n	8005640 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d115      	bne.n	8005640 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <vPortFree+0xa8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	43db      	mvns	r3, r3
 800561e:	401a      	ands	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005624:	f7ff f8b0 	bl	8004788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	4b07      	ldr	r3, [pc, #28]	; (800564c <vPortFree+0xac>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4413      	add	r3, r2
 8005632:	4a06      	ldr	r2, [pc, #24]	; (800564c <vPortFree+0xac>)
 8005634:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005636:	6938      	ldr	r0, [r7, #16]
 8005638:	f000 f86c 	bl	8005714 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800563c:	f7ff f8b2 	bl	80047a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005640:	bf00      	nop
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20001008 	.word	0x20001008
 800564c:	20001000 	.word	0x20001000

08005650 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005656:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800565a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800565c:	4b27      	ldr	r3, [pc, #156]	; (80056fc <prvHeapInit+0xac>)
 800565e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3307      	adds	r3, #7
 800566e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0307 	bic.w	r3, r3, #7
 8005676:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	4a1f      	ldr	r2, [pc, #124]	; (80056fc <prvHeapInit+0xac>)
 8005680:	4413      	add	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005688:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <prvHeapInit+0xb0>)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800568e:	4b1c      	ldr	r3, [pc, #112]	; (8005700 <prvHeapInit+0xb0>)
 8005690:	2200      	movs	r2, #0
 8005692:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	4413      	add	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800569c:	2208      	movs	r2, #8
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <prvHeapInit+0xb4>)
 80056b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056b2:	4b14      	ldr	r3, [pc, #80]	; (8005704 <prvHeapInit+0xb4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2200      	movs	r2, #0
 80056b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056ba:	4b12      	ldr	r3, [pc, #72]	; (8005704 <prvHeapInit+0xb4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	1ad2      	subs	r2, r2, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <prvHeapInit+0xb4>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <prvHeapInit+0xb8>)
 80056de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4a09      	ldr	r2, [pc, #36]	; (800570c <prvHeapInit+0xbc>)
 80056e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056e8:	4b09      	ldr	r3, [pc, #36]	; (8005710 <prvHeapInit+0xc0>)
 80056ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056ee:	601a      	str	r2, [r3, #0]
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	200003f4 	.word	0x200003f4
 8005700:	20000ff4 	.word	0x20000ff4
 8005704:	20000ffc 	.word	0x20000ffc
 8005708:	20001004 	.word	0x20001004
 800570c:	20001000 	.word	0x20001000
 8005710:	20001008 	.word	0x20001008

08005714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800571c:	4b27      	ldr	r3, [pc, #156]	; (80057bc <prvInsertBlockIntoFreeList+0xa8>)
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	e002      	b.n	8005728 <prvInsertBlockIntoFreeList+0x14>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	429a      	cmp	r2, r3
 8005730:	d8f7      	bhi.n	8005722 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4413      	add	r3, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d108      	bne.n	8005756 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	441a      	add	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	441a      	add	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d118      	bne.n	800579c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <prvInsertBlockIntoFreeList+0xac>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d00d      	beq.n	8005792 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	e008      	b.n	80057a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005792:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <prvInsertBlockIntoFreeList+0xac>)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	e003      	b.n	80057a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d002      	beq.n	80057b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057b2:	bf00      	nop
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr
 80057bc:	20000ff4 	.word	0x20000ff4
 80057c0:	20000ffc 	.word	0x20000ffc

080057c4 <__libc_init_array>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	2500      	movs	r5, #0
 80057c8:	4e0c      	ldr	r6, [pc, #48]	; (80057fc <__libc_init_array+0x38>)
 80057ca:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <__libc_init_array+0x3c>)
 80057cc:	1ba4      	subs	r4, r4, r6
 80057ce:	10a4      	asrs	r4, r4, #2
 80057d0:	42a5      	cmp	r5, r4
 80057d2:	d109      	bne.n	80057e8 <__libc_init_array+0x24>
 80057d4:	f000 f82e 	bl	8005834 <_init>
 80057d8:	2500      	movs	r5, #0
 80057da:	4e0a      	ldr	r6, [pc, #40]	; (8005804 <__libc_init_array+0x40>)
 80057dc:	4c0a      	ldr	r4, [pc, #40]	; (8005808 <__libc_init_array+0x44>)
 80057de:	1ba4      	subs	r4, r4, r6
 80057e0:	10a4      	asrs	r4, r4, #2
 80057e2:	42a5      	cmp	r5, r4
 80057e4:	d105      	bne.n	80057f2 <__libc_init_array+0x2e>
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057ec:	4798      	blx	r3
 80057ee:	3501      	adds	r5, #1
 80057f0:	e7ee      	b.n	80057d0 <__libc_init_array+0xc>
 80057f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057f6:	4798      	blx	r3
 80057f8:	3501      	adds	r5, #1
 80057fa:	e7f2      	b.n	80057e2 <__libc_init_array+0x1e>
 80057fc:	080058fc 	.word	0x080058fc
 8005800:	080058fc 	.word	0x080058fc
 8005804:	080058fc 	.word	0x080058fc
 8005808:	08005900 	.word	0x08005900

0800580c <memcpy>:
 800580c:	b510      	push	{r4, lr}
 800580e:	1e43      	subs	r3, r0, #1
 8005810:	440a      	add	r2, r1
 8005812:	4291      	cmp	r1, r2
 8005814:	d100      	bne.n	8005818 <memcpy+0xc>
 8005816:	bd10      	pop	{r4, pc}
 8005818:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005820:	e7f7      	b.n	8005812 <memcpy+0x6>

08005822 <memset>:
 8005822:	4603      	mov	r3, r0
 8005824:	4402      	add	r2, r0
 8005826:	4293      	cmp	r3, r2
 8005828:	d100      	bne.n	800582c <memset+0xa>
 800582a:	4770      	bx	lr
 800582c:	f803 1b01 	strb.w	r1, [r3], #1
 8005830:	e7f9      	b.n	8005826 <memset+0x4>
	...

08005834 <_init>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr

08005840 <_fini>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	bf00      	nop
 8005844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005846:	bc08      	pop	{r3}
 8005848:	469e      	mov	lr, r3
 800584a:	4770      	bx	lr
